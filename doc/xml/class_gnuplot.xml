<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="class_gnuplot" kind="class" prot="public">
    <compoundname>Gnuplot</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_gnuplot_1a93e59138d3e192ffa2a4f0d7c310d61d" prot="private" static="no" mutable="no">
        <type>FILE *</type>
        <definition>FILE* Gnuplot::gnucmd</definition>
        <argsstring></argsstring>
        <name>gnucmd</name>
        <briefdescription>
<para>pointer to the stream that can be used to write to the pipe </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="77" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1a0155f4026915ed9b05b18c1e89ba9757" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gnuplot::valid</definition>
        <argsstring></argsstring>
        <name>valid</name>
        <briefdescription>
<para>validation of gnuplot session </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="79" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1a871efce13e856022b3ba36caaa10ea33" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Gnuplot::two_dim</definition>
        <argsstring></argsstring>
        <name>two_dim</name>
        <briefdescription>
<para>true = 2d, false = 3d </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="81" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1acceb0a453297bb0ec7b26ec1dafbcec2" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Gnuplot::nplots</definition>
        <argsstring></argsstring>
        <name>nplots</name>
        <briefdescription>
<para>number of plots in session </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="83" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1a418930ab9ec992bcf1b9257e4c2bf6a9" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gnuplot::pstyle</definition>
        <argsstring></argsstring>
        <name>pstyle</name>
        <briefdescription>
<para>functions and data are displayed in a defined styles </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="85" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1a492b77047e8a79ef760e54ceb89de539" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Gnuplot::smooth</definition>
        <argsstring></argsstring>
        <name>smooth</name>
        <briefdescription>
<para>interpolate and approximate data in defined styles (e.g. spline) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="87" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1a7b9f721714ffb6aff0d374fcf1c8c90f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Gnuplot::tmpfile_list</definition>
        <argsstring></argsstring>
        <name>tmpfile_list</name>
        <briefdescription>
<para>list of created tmpfiles </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="89" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_gnuplot_1acfc7e1f0bc2e131abb9844bdbe7fc01c" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int Gnuplot::tmpfile_num</definition>
        <argsstring></argsstring>
        <name>tmpfile_num</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>number of all tmpfiles (number of tmpfiles restricted) </para>        </briefdescription>
        <detaileddescription>
<para>A C++ interface to gnuplot.</para><para>The interface uses pipes and so won&apos;t run on a system that doesn&apos;t have POSIX pipe support Tested on Windows (MinGW and Visual C++) and Linux (GCC)</para><para>Version history: 0. C interface by N. Devillard (27/01/03)<orderedlist>
<listitem><para>C++ interface: direct translation from the C interface by Rajarshi Guha (07/03/03)</para></listitem><listitem><para>corrections for Win32 compatibility by V. Chyzhdzenka (20/05/03)</para></listitem><listitem><para>some member functions added, corrections for Win32 and Linux compatibility by M. Burgis (10/03/08)</para></listitem><listitem><para>Some minor modifications to allow use by KeyCpp by J. Monschke (08/15/2013)</para></listitem></orderedlist>
</para><para>Requirements:<itemizedlist>
<listitem><para>gnuplot has to be installed (<ulink url="http://www.gnuplot.info/download.html">http://www.gnuplot.info/download.html</ulink>)</para></listitem><listitem><para>for Windows: set Path-Variable for <ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> path (e.g. C:/program files/gnuplot/bin) or set <ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> path with: <ref refid="class_gnuplot_1a67cae885c26ced821e335d98986f1967" kindref="member">Gnuplot::set_GNUPlotPath(const std::string &amp;path)</ref>; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="94" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1ae71e004ab7266f34d270cf76ea143e2b" prot="private" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string Gnuplot::m_sGNUPlotFileName</definition>
        <argsstring></argsstring>
        <name>m_sGNUPlotFileName</name>
        <briefdescription>
<para>name of executed GNUPlot file </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="96" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1a3c5949b04c54833eb685c30322c816e6" prot="private" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string Gnuplot::m_sGNUPlotPath</definition>
        <argsstring></argsstring>
        <name>m_sGNUPlotPath</name>
        <briefdescription>
<para>gnuplot path </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="98" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_gnuplot_1ad763c98e6b2f51bef05f0b2da522fef4" prot="private" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string Gnuplot::terminal_std</definition>
        <argsstring></argsstring>
        <name>terminal_std</name>
        <briefdescription>
<para>standart terminal, used by showonscreen </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="100" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_gnuplot_1a08d1e4ec069ec1cb82bb96427d1e0d7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gnuplot::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
<para>get_program_path(); and popen(); </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;ndash;&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>void</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="111" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="836" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a3ceb471d375865fccd412105cb587dd1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gnuplot::file_available</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>file_available</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>checks if file is available </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the filename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the mode [optional,default value = 0]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file exists (yes == true, no == false) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="130" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="1007" bodyend="1022"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_gnuplot_1a3a769e47861d74fa713070ecd857dd17" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gnuplot::get_program_path</definition>
        <argsstring>()</argsstring>
        <name>get_program_path</name>
        <briefdescription>
<para>gnuplot path found? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> found the gnuplot path (yes == true, no == false) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="120" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="900" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1abc0f1d75cb78804a5b8efdfa4df582cd" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gnuplot::file_exists</definition>
        <argsstring>(const std::string &amp;filename, int mode=0)</argsstring>
        <name>file_exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>checks if file exists </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the filename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the mode [optional,default value = 0]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file exists (yes == true, no == false) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="140" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="973" bodyend="1005"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_gnuplot_1a8ced9e766e0677b938178dafe9264ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gnuplot::create_tmpfile</definition>
        <argsstring>(std::ofstream &amp;tmp)</argsstring>
        <name>create_tmpfile</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>tmp</declname>
        </param>
        <briefdescription>
<para>creates tmpfile and returns its name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tmp</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; points to the tempfile</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> the name of the tempfile </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="151" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="1030" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1af51b1d33cffebc835a4b493cce1b0bce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gnuplot::get_style</definition>
        <argsstring>()</argsstring>
        <name>get_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="153" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ae2cd259922eb5d9486a4c5082c16e028" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Gnuplot::get_terminal_std</definition>
        <argsstring>()</argsstring>
        <name>get_terminal_std</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="154" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a187eb517b362cf379492fe7f1621ee50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gnuplot::Gnuplot</definition>
        <argsstring>(const std::string &amp;style=&quot;points&quot;)</argsstring>
        <name>Gnuplot</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>style</declname>
          <defval>&quot;points&quot;</defval>
        </param>
        <briefdescription>
<para>set a style during construction </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="183" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="597" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a8ceac5808e42665c1dee305ae7ea9070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gnuplot::Gnuplot</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;x, const std::string &amp;title=&quot;&quot;, const std::string &amp;style=&quot;points&quot;, const std::string &amp;labelx=&quot;x&quot;, const std::string &amp;labely=&quot;y&quot;)</argsstring>
        <name>Gnuplot</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>style</declname>
          <defval>&quot;points&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labelx</declname>
          <defval>&quot;x&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labely</declname>
          <defval>&quot;y&quot;</defval>
        </param>
        <briefdescription>
<para>plot a single std::vector at one go </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="190" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="609" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a24327b6116c71acdc195eadf665c67cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gnuplot::Gnuplot</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const std::string &amp;title=&quot;&quot;, const std::string &amp;style=&quot;points&quot;, const std::string &amp;labelx=&quot;x&quot;, const std::string &amp;labely=&quot;y&quot;)</argsstring>
        <name>Gnuplot</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>style</declname>
          <defval>&quot;points&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labelx</declname>
          <defval>&quot;x&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labely</declname>
          <defval>&quot;y&quot;</defval>
        </param>
        <briefdescription>
<para>plot pairs std::vector at one go </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="198" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="630" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a14191e89154f2716608f6907975cc012" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gnuplot::Gnuplot</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, const std::vector&lt; double &gt; &amp;z, const std::string &amp;title=&quot;&quot;, const std::string &amp;style=&quot;points&quot;, const std::string &amp;labelx=&quot;x&quot;, const std::string &amp;labely=&quot;y&quot;, const std::string &amp;labelz=&quot;z&quot;)</argsstring>
        <name>Gnuplot</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>style</declname>
          <defval>&quot;points&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labelx</declname>
          <defval>&quot;x&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labely</declname>
          <defval>&quot;y&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>labelz</declname>
          <defval>&quot;z&quot;</defval>
        </param>
        <briefdescription>
<para>plot triples std::vector at one go </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="208" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="652" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a78a68f621caa87d1f34324fcd093c7bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gnuplot::~Gnuplot</definition>
        <argsstring>()</argsstring>
        <name>~Gnuplot</name>
        <briefdescription>
<para>destructor: needed to delete temporary files </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="211" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="882" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a07607803ede8dd5416906df0a1924fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::cmd</definition>
        <argsstring>(const std::string &amp;cmdstr)</argsstring>
        <name>cmd</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmdstr</declname>
        </param>
        <briefdescription>
<para>send a command to gnuplot </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="217" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="789" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1afb69631c7a498077e378a3cbb56f38c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::operator&lt;&lt;</definition>
        <argsstring>(const std::string &amp;cmdstr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmdstr</declname>
        </param>
        <briefdescription>
<para>Sends a command to an active gnuplot session, identical to <ref refid="class_gnuplot_1a07607803ede8dd5416906df0a1924fc5" kindref="member">cmd()</ref> send a command to gnuplot using the &lt;&lt; operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmdstr</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the command string</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> a reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="226" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a356d2faaa79f08d13fec9718b776b28d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::showonscreen</definition>
        <argsstring>()</argsstring>
        <name>showonscreen</name>
        <briefdescription>
<para>sets terminal type to terminal_std </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="237" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="213" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a032072c7c01b508a7535a17fb08562b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::savetops</definition>
        <argsstring>(const std::string &amp;filename=&quot;gnuplot_output&quot;)</argsstring>
        <name>savetops</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
          <defval>&quot;gnuplot_output&quot;</defval>
        </param>
        <briefdescription>
<para>saves a gnuplot session to a postscript file, filename without extension </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="240" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1acfdcda292650775ebed4683e8e1515b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_style</definition>
        <argsstring>(const std::string &amp;stylestr=&quot;points&quot;)</argsstring>
        <name>set_style</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>stylestr</declname>
          <defval>&quot;points&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set line style (some of these styles require additional information): lines, points, linespoints, impulses, dots, steps, fsteps, histeps, boxes, histograms, filledcurves </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="249" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="143" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aa18386919da2ec4c994f1f9c7195d384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_smooth</definition>
        <argsstring>(const std::string &amp;stylestr=&quot;csplines&quot;)</argsstring>
        <name>set_smooth</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>stylestr</declname>
          <defval>&quot;csplines&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>interpolation and approximation of data, arguments: csplines, bezier, acsplines (for data values &gt; 0), sbezier, unique, frequency (works only with plot_x, plot_xy, plotfile_x, plotfile_xy (if smooth is set, set_style has no effekt on data plotting) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="255" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="189" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ad9dfbccd66dece1dbe5803605c6ab08c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_smooth</definition>
        <argsstring>()</argsstring>
        <name>unset_smooth</name>
        <briefdescription>
<para>unset smooth attention: smooth is not set by default </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> a reference to a gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="265" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a95ec1636a871447dfe99463b769339c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_pointsize</definition>
        <argsstring>(const double pointsize=1.0)</argsstring>
        <name>set_pointsize</name>
        <param>
          <type>const double</type>
          <declname>pointsize</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>scales the size of the points used in plots </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="269" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="296" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a5416c8e81f1b9945b9631fa85a8d4f47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_grid</definition>
        <argsstring>()</argsstring>
        <name>set_grid</name>
        <briefdescription>
<para>turns grid on/off </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="272" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a53183e1487bc6977f0d46bf75d19b4d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_grid</definition>
        <argsstring>()</argsstring>
        <name>unset_grid</name>
        <briefdescription>
<para>grid is not set by default </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="274" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a67efc4d4dc46b6100d14ba2f7366ef11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_multiplot</definition>
        <argsstring>()</argsstring>
        <name>set_multiplot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the mulitplot mode</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="283" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aad76cdec16cfb5fdf82f45ed2786f4d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_multiplot</definition>
        <argsstring>()</argsstring>
        <name>unset_multiplot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unsets the mulitplot mode</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="292" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a671cbe7b18a267ea59f532c83a0035f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_samples</definition>
        <argsstring>(const int samples=100)</argsstring>
        <name>set_samples</name>
        <param>
          <type>const int</type>
          <declname>samples</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>set sampling rate of functions, or for interpolating data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="297" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="309" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ab810fa4c02fb49ae197786c305b78702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_isosamples</definition>
        <argsstring>(const int isolines=10)</argsstring>
        <name>set_isosamples</name>
        <param>
          <type>const int</type>
          <declname>isolines</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>set isoline density (grid) for plotting functions as surfaces (for 3d plots) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="299" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="323" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a891f9800705eddc3f73886f265c009b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_hidden3d</definition>
        <argsstring>()</argsstring>
        <name>set_hidden3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enables/disables hidden line removal for surface plotting (for 3d plot)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="308" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ab8688182047f746090e1e5f2a8c11c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_hidden3d</definition>
        <argsstring>()</argsstring>
        <name>unset_hidden3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>hidden3d is not set by default</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="317" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="317" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1af845efc728a90d7e10de764eff0b2423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_contour</definition>
        <argsstring>(const std::string &amp;position=&quot;base&quot;)</argsstring>
        <name>set_contour</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>position</declname>
          <defval>&quot;base&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enables/disables contour drawing for surfaces (for 3d plot) base, surface, both </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="321" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="338" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a0b8522cb81e46dd4f5a22b7b48f977b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_contour</definition>
        <argsstring>()</argsstring>
        <name>unset_contour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>contour is not set by default, it disables contour drawing for surfaces</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="329" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a9825bd26500e30ca88404c4807e6607a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_surface</definition>
        <argsstring>()</argsstring>
        <name>set_surface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enables/disables the display of surfaces (for 3d plot)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="338" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a4ebddacbec61aa3e7bc4b89f508ad621" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_surface</definition>
        <argsstring>()</argsstring>
        <name>unset_surface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>surface is set by default, it disables the display of surfaces (for 3d plot)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="348" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="348" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ad64a717dac18167f656c4f09239973f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_legend</definition>
        <argsstring>(const std::string &amp;position=&quot;default&quot;)</argsstring>
        <name>set_legend</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>position</declname>
          <defval>&quot;default&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>switches legend on/off position: inside/outside, left/center/right, top/center/bottom, nobox/box </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="353" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="240" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ace901a18ab1a459213afd3ee0233b5ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_legend</definition>
        <argsstring>()</argsstring>
        <name>unset_legend</name>
        <briefdescription>
<para>Switches legend off attention:legend is set by default. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="363" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="363" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a4f93bac0e69dd83806652ca7226c6b3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_title</definition>
        <argsstring>(const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>set_title</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>sets and clears the title of a gnuplot session </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the title of the plot [optional, default == &quot;&quot;]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="373" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="372" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aca0aeb1dc0ac8d7e68ba6a15a977be28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_title</definition>
        <argsstring>()</argsstring>
        <name>unset_title</name>
        <briefdescription>
<para>Clears the title of a gnuplot session The title is not set by default. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="390" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="390" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1afcb311938827f8718f19ed52d66bad7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_ylabel</definition>
        <argsstring>(const std::string &amp;label=&quot;x&quot;)</argsstring>
        <name>set_ylabel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
          <defval>&quot;x&quot;</defval>
        </param>
        <briefdescription>
<para>set x axis label </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="394" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="372" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aa93589a95aeab869ba731e2583843ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_xlabel</definition>
        <argsstring>(const std::string &amp;label=&quot;y&quot;)</argsstring>
        <name>set_xlabel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
          <defval>&quot;y&quot;</defval>
        </param>
        <briefdescription>
<para>set y axis label </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="396" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="359" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1ab3206e715d20f05cc0dd1eec89ce8b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_zlabel</definition>
        <argsstring>(const std::string &amp;label=&quot;z&quot;)</argsstring>
        <name>set_zlabel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
          <defval>&quot;z&quot;</defval>
        </param>
        <briefdescription>
<para>set z axis label </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="398" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="385" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a4b8d96018f2d2d4e2922d4df153d6a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_xrange</definition>
        <argsstring>(const double iFrom, const double iTo)</argsstring>
        <name>set_xrange</name>
        <param>
          <type>const double</type>
          <declname>iFrom</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>iTo</declname>
        </param>
        <briefdescription>
<para>set axis - ranges </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="402" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="400" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a461271b7bfd4f84bdfc0055457226f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_yrange</definition>
        <argsstring>(const double iFrom, const double iTo)</argsstring>
        <name>set_yrange</name>
        <param>
          <type>const double</type>
          <declname>iFrom</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>iTo</declname>
        </param>
        <briefdescription>
<para>set y-axis - ranges </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="405" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="414" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a7273f6a48024117b4d234d0251106e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_zrange</definition>
        <argsstring>(const double iFrom, const double iTo)</argsstring>
        <name>set_zrange</name>
        <param>
          <type>const double</type>
          <declname>iFrom</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>iTo</declname>
        </param>
        <briefdescription>
<para>set z-axis - ranges </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="408" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="428" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a11a62a04c203f01607c3c21a727e318d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_xautoscale</definition>
        <argsstring>()</argsstring>
        <name>set_xautoscale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>autoscale axis (set by default) of xaxis</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="415" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a5b9e1a4e68f94d418a8e9194f168b448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_yautoscale</definition>
        <argsstring>()</argsstring>
        <name>set_yautoscale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>autoscale axis (set by default) of yaxis</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="424" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aef3e84e793836158e1ddd773d1465c37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::set_zautoscale</definition>
        <argsstring>()</argsstring>
        <name>set_zautoscale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>autoscale axis (set by default) of zaxis</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="433" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="433" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aff546fad227d93babeb5d2cc9f047b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_xlogscale</definition>
        <argsstring>(const double base=10)</argsstring>
        <name>set_xlogscale</name>
        <param>
          <type>const double</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>turns on/off log scaling for the specified xaxis (logscale is not set by default) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="437" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="254" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a201a802d2f27fece0d39809c4eb3bce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_ylogscale</definition>
        <argsstring>(const double base=10)</argsstring>
        <name>set_ylogscale</name>
        <param>
          <type>const double</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>turns on/off log scaling for the specified yaxis (logscale is not set by default) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="439" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="268" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a1da3838163b0dbde8809b55c5b5c56b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_zlogscale</definition>
        <argsstring>(const double base=10)</argsstring>
        <name>set_zlogscale</name>
        <param>
          <type>const double</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>turns on/off log scaling for the specified zaxis (logscale is not set by default) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="441" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="282" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a7b178184260f1498cd0c11a197ea0ac2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_xlogscale</definition>
        <argsstring>()</argsstring>
        <name>unset_xlogscale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>turns off log scaling for the x axis</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="450" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="450" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a9217543dd49c4802b1194d42c5e10b6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_ylogscale</definition>
        <argsstring>()</argsstring>
        <name>unset_ylogscale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>turns off log scaling for the y axis</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="459" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="459" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1afa67f022ca344593b054d7f2e3406c7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::unset_zlogscale</definition>
        <argsstring>()</argsstring>
        <name>unset_zlogscale</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>turns off log scaling for the z axis</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;<ndash/> reference to the gnuplot object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="468" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a2228f5ab4cce2da463fc90383076a598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::set_cbrange</definition>
        <argsstring>(const double iFrom, const double iTo)</argsstring>
        <name>set_cbrange</name>
        <param>
          <type>const double</type>
          <declname>iFrom</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>iTo</declname>
        </param>
        <briefdescription>
<para>set palette range (autoscale by default) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="472" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="443" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a4fc34218cdfdd27a65b92eea1f1f9e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plotfile_x</definition>
        <argsstring>(const std::string &amp;filename, const unsigned int column=1, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plotfile_x</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>plot a single std::vector: x from file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="482" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="560" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a80f3b2baae2bceff78ad005d9c3ec3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_x</definition>
        <argsstring>(const X &amp;x, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_x</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>from std::vector </para>        </briefdescription>
        <detaileddescription>
<para>Plots a 2d graph from a list of doubles: x. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="485" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="678" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a10e1fc7344bd726faa2d70cd5ced5e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plotfile_xy</definition>
        <argsstring>(const std::string &amp;filename, const unsigned int column_x=1, const unsigned int column_y=2, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plotfile_xy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_x</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_y</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>plot x,y pairs: x y from file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="493" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="605" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a0514a7391de6b42e79732ce746c310f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_xy</definition>
        <argsstring>(const X &amp;x, const Y &amp;y, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_xy</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Y &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>from data </para>        </briefdescription>
        <detaileddescription>
<para>Plots a 2d graph from a list of doubles: x y. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="496" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="712" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1afe9d44ba12f617188111ab915010f3ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plotfile_xy_err</definition>
        <argsstring>(const std::string &amp;filename, const unsigned int column_x=1, const unsigned int column_y=2, const unsigned int column_dy=3, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plotfile_xy_err</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_x</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_y</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_dy</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>plot x,y pairs with dy errorbars: x y dy from file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="505" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="650" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a3c5d382eba33f92b26ba85f201bc7dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_xy_err</definition>
        <argsstring>(const X &amp;x, const Y &amp;y, const E &amp;dy, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_xy_err</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Y &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const E &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>from data </para>        </briefdescription>
        <detaileddescription>
<para><hruler/>
</para><para>plot x,y pairs with dy errorbars </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="509" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="752" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a9dbde2a91eb816481657f3a22c9b0046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plotfile_xyz</definition>
        <argsstring>(const std::string &amp;filename, const unsigned int column_x=1, const unsigned int column_y=2, const unsigned int column_z=3, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plotfile_xyz</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_x</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_y</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>column_z</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>plot x,y,z triples: x y z from file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="518" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="692" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1af89cb366fa7d09ffc1c351516ae54df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename X</type>
          </param>
          <param>
            <type>typename Y</type>
          </param>
          <param>
            <type>typename Z</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_xyz</definition>
        <argsstring>(const X &amp;x, const Y &amp;y, const Z &amp;z, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_xyz</name>
        <param>
          <type>const X &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const Y &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const Z &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>from std::vector </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="524" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="797" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a51ea5105eb87285820bb93910f8d346c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_slope</definition>
        <argsstring>(const double a, const double b, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_slope</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>plot an equation of the form: y = ax + b, you supply a and b </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="531" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="459" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a42dfb8c9d4636745c7be277ed818e849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_equation</definition>
        <argsstring>(const std::string &amp;equation, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_equation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>equation</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>plot an equation supplied as a std::string y=f(x), write only the function f(x) not y= the independent variable has to be x binary operators: ** exponentiation, * multiply, / divide, + add, - substract, % modulo unary operators: - minus, ! factorial elementary functions: rand(x), abs(x), sgn(x), ceil(x), floor(x), int(x), imag(x), real(x), arg(x), sqrt(x), exp(x), log(x), log10(x), sin(x), cos(x), tan(x), asin(x), acos(x), atan(x), atan2(y,x), sinh(x), cosh(x), tanh(x), asinh(x), acosh(x), atanh(x) special functions: erf(x), erfc(x), inverf(x), gamma(x), igamma(a,x), lgamma(x), ibeta(p,q,x), besj0(x), besj1(x), besy0(x), besy1(x), lambertw(x) statistical fuctions: norm(x), invnorm(x) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="545" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="493" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a79aed3a6927f7d1d3497cba441e8a943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_equation3d</definition>
        <argsstring>(const std::string &amp;equation, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_equation3d</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>equation</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>plot an equation supplied as a std::string z=f(x,y), write only the function f(x,y) not z= the independent variables have to be x and y </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="550" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="526" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1aae22c0470a6fbbc1f5e84dec8d023381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::plot_image</definition>
        <argsstring>(const unsigned char *ucPicBuf, const unsigned int iWidth, const unsigned int iHeight, const std::string &amp;title=&quot;&quot;)</argsstring>
        <name>plot_image</name>
        <param>
          <type>const unsigned char *</type>
          <declname>ucPicBuf</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>iWidth</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>iHeight</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>title</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>plot image </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>note that this function is not valid for versions of GNUPlot below 4.2 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="557" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="734" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a34c1b3e877d246a841a29f857a29f502" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot&amp; Gnuplot::replot</definition>
        <argsstring>(void)</argsstring>
        <name>replot</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>replot repeats the last plot or splot command. this can be useful for viewing a plot with different set options, or when generating the same plot for several devices (showonscreen, savetops) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><mdash/> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="569" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="569" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a6797761712d3c311e3685bcccba65dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::reset_plot</definition>
        <argsstring>()</argsstring>
        <name>reset_plot</name>
        <briefdescription>
<para>resets a gnuplot session (next plot will erase previous ones) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="572" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a9aedfe8371083a1a3ac2b9493810049c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> &amp;</type>
        <definition>Gnuplot &amp; Gnuplot::reset_all</definition>
        <argsstring>()</argsstring>
        <name>reset_all</name>
        <briefdescription>
<para>resets a gnuplot session and sets all variables to default </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="575" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a2e449552587b0055f40f4ee079d62a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gnuplot::remove_tmpfiles</definition>
        <argsstring>()</argsstring>
        <name>remove_tmpfiles</name>
        <briefdescription>
<para>deletes temporary files </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="578" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="1096" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a3135ffebb308b50c4f3178a62b23ab03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gnuplot::is_valid</definition>
        <argsstring>()</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>Is the gnuplot session valid ?? </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;mdash;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if valid, false if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="588" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="588" bodyend="588"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_gnuplot_1a67cae885c26ced821e335d98986f1967" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Gnuplot::set_GNUPlotPath</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>set_GNUPlotPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>optional function: set <ref refid="class_gnuplot" kindref="compound">Gnuplot</ref> path manual attention: for windows: path with slash &apos;/&apos; not backslash &apos;\&apos; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the gnuplot path</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="164" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="62" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_gnuplot_1a21feba7a3916708b742c3dc25850ab2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gnuplot::set_terminal_std</definition>
        <argsstring>(const std::string &amp;type)</argsstring>
        <name>set_terminal_std</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>optional: set standart terminal, used by showonscreen defaults: Windows - win, Linux - x11, Mac - aqua <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para><ndash/>&gt; the terminal type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><mdash/> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="175" bodyfile="/media/Storage/Research/open_source/keycpp/src/gnuplot_i.cpp" bodystart="90" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" line="71" bodyfile="/media/Storage/Research/open_source/keycpp/include/gnuplot_i.h" bodystart="70" bodyend="590"/>
    <listofallmembers>
      <member refid="class_gnuplot_1a07607803ede8dd5416906df0a1924fc5" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>cmd</name></member>
      <member refid="class_gnuplot_1a8ced9e766e0677b938178dafe9264ff7" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>create_tmpfile</name></member>
      <member refid="class_gnuplot_1a3ceb471d375865fccd412105cb587dd1" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>file_available</name></member>
      <member refid="class_gnuplot_1abc0f1d75cb78804a5b8efdfa4df582cd" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>file_exists</name></member>
      <member refid="class_gnuplot_1a3a769e47861d74fa713070ecd857dd17" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>get_program_path</name></member>
      <member refid="class_gnuplot_1af51b1d33cffebc835a4b493cce1b0bce" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>get_style</name></member>
      <member refid="class_gnuplot_1ae2cd259922eb5d9486a4c5082c16e028" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>get_terminal_std</name></member>
      <member refid="class_gnuplot_1a93e59138d3e192ffa2a4f0d7c310d61d" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>gnucmd</name></member>
      <member refid="class_gnuplot_1a187eb517b362cf379492fe7f1621ee50" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>Gnuplot</name></member>
      <member refid="class_gnuplot_1a8ceac5808e42665c1dee305ae7ea9070" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>Gnuplot</name></member>
      <member refid="class_gnuplot_1a24327b6116c71acdc195eadf665c67cb" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>Gnuplot</name></member>
      <member refid="class_gnuplot_1a14191e89154f2716608f6907975cc012" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>Gnuplot</name></member>
      <member refid="class_gnuplot_1a08d1e4ec069ec1cb82bb96427d1e0d7f" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>init</name></member>
      <member refid="class_gnuplot_1a3135ffebb308b50c4f3178a62b23ab03" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>is_valid</name></member>
      <member refid="class_gnuplot_1ae71e004ab7266f34d270cf76ea143e2b" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>m_sGNUPlotFileName</name></member>
      <member refid="class_gnuplot_1a3c5949b04c54833eb685c30322c816e6" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>m_sGNUPlotPath</name></member>
      <member refid="class_gnuplot_1acceb0a453297bb0ec7b26ec1dafbcec2" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>nplots</name></member>
      <member refid="class_gnuplot_1afb69631c7a498077e378a3cbb56f38c8" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_gnuplot_1a42dfb8c9d4636745c7be277ed818e849" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_equation</name></member>
      <member refid="class_gnuplot_1a79aed3a6927f7d1d3497cba441e8a943" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_equation3d</name></member>
      <member refid="class_gnuplot_1aae22c0470a6fbbc1f5e84dec8d023381" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_image</name></member>
      <member refid="class_gnuplot_1a51ea5105eb87285820bb93910f8d346c" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_slope</name></member>
      <member refid="class_gnuplot_1a80f3b2baae2bceff78ad005d9c3ec3fb" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_x</name></member>
      <member refid="class_gnuplot_1a0514a7391de6b42e79732ce746c310f7" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_xy</name></member>
      <member refid="class_gnuplot_1a3c5d382eba33f92b26ba85f201bc7dea" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_xy_err</name></member>
      <member refid="class_gnuplot_1af89cb366fa7d09ffc1c351516ae54df5" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plot_xyz</name></member>
      <member refid="class_gnuplot_1a4fc34218cdfdd27a65b92eea1f1f9e84" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plotfile_x</name></member>
      <member refid="class_gnuplot_1a10e1fc7344bd726faa2d70cd5ced5e5e" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plotfile_xy</name></member>
      <member refid="class_gnuplot_1afe9d44ba12f617188111ab915010f3ab" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plotfile_xy_err</name></member>
      <member refid="class_gnuplot_1a9dbde2a91eb816481657f3a22c9b0046" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>plotfile_xyz</name></member>
      <member refid="class_gnuplot_1a418930ab9ec992bcf1b9257e4c2bf6a9" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>pstyle</name></member>
      <member refid="class_gnuplot_1a2e449552587b0055f40f4ee079d62a8d" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>remove_tmpfiles</name></member>
      <member refid="class_gnuplot_1a34c1b3e877d246a841a29f857a29f502" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>replot</name></member>
      <member refid="class_gnuplot_1a9aedfe8371083a1a3ac2b9493810049c" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>reset_all</name></member>
      <member refid="class_gnuplot_1a6797761712d3c311e3685bcccba65dd4" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>reset_plot</name></member>
      <member refid="class_gnuplot_1a032072c7c01b508a7535a17fb08562b1" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>savetops</name></member>
      <member refid="class_gnuplot_1a2228f5ab4cce2da463fc90383076a598" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_cbrange</name></member>
      <member refid="class_gnuplot_1af845efc728a90d7e10de764eff0b2423" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_contour</name></member>
      <member refid="class_gnuplot_1a67cae885c26ced821e335d98986f1967" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_GNUPlotPath</name></member>
      <member refid="class_gnuplot_1a5416c8e81f1b9945b9631fa85a8d4f47" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_grid</name></member>
      <member refid="class_gnuplot_1a891f9800705eddc3f73886f265c009b8" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_hidden3d</name></member>
      <member refid="class_gnuplot_1ab810fa4c02fb49ae197786c305b78702" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_isosamples</name></member>
      <member refid="class_gnuplot_1ad64a717dac18167f656c4f09239973f8" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_legend</name></member>
      <member refid="class_gnuplot_1a67efc4d4dc46b6100d14ba2f7366ef11" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_multiplot</name></member>
      <member refid="class_gnuplot_1a95ec1636a871447dfe99463b769339c7" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_pointsize</name></member>
      <member refid="class_gnuplot_1a671cbe7b18a267ea59f532c83a0035f6" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_samples</name></member>
      <member refid="class_gnuplot_1aa18386919da2ec4c994f1f9c7195d384" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_smooth</name></member>
      <member refid="class_gnuplot_1acfdcda292650775ebed4683e8e1515b5" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_style</name></member>
      <member refid="class_gnuplot_1a9825bd26500e30ca88404c4807e6607a" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_surface</name></member>
      <member refid="class_gnuplot_1a21feba7a3916708b742c3dc25850ab2f" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_terminal_std</name></member>
      <member refid="class_gnuplot_1a4f93bac0e69dd83806652ca7226c6b3b" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_title</name></member>
      <member refid="class_gnuplot_1a11a62a04c203f01607c3c21a727e318d" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_xautoscale</name></member>
      <member refid="class_gnuplot_1aa93589a95aeab869ba731e2583843ae4" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_xlabel</name></member>
      <member refid="class_gnuplot_1aff546fad227d93babeb5d2cc9f047b89" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_xlogscale</name></member>
      <member refid="class_gnuplot_1a4b8d96018f2d2d4e2922d4df153d6a84" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_xrange</name></member>
      <member refid="class_gnuplot_1a5b9e1a4e68f94d418a8e9194f168b448" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_yautoscale</name></member>
      <member refid="class_gnuplot_1afcb311938827f8718f19ed52d66bad7c" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_ylabel</name></member>
      <member refid="class_gnuplot_1a201a802d2f27fece0d39809c4eb3bce0" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_ylogscale</name></member>
      <member refid="class_gnuplot_1a461271b7bfd4f84bdfc0055457226f28" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_yrange</name></member>
      <member refid="class_gnuplot_1aef3e84e793836158e1ddd773d1465c37" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_zautoscale</name></member>
      <member refid="class_gnuplot_1ab3206e715d20f05cc0dd1eec89ce8b07" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_zlabel</name></member>
      <member refid="class_gnuplot_1a1da3838163b0dbde8809b55c5b5c56b1" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_zlogscale</name></member>
      <member refid="class_gnuplot_1a7273f6a48024117b4d234d0251106e78" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>set_zrange</name></member>
      <member refid="class_gnuplot_1a356d2faaa79f08d13fec9718b776b28d" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>showonscreen</name></member>
      <member refid="class_gnuplot_1a492b77047e8a79ef760e54ceb89de539" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>smooth</name></member>
      <member refid="class_gnuplot_1ad763c98e6b2f51bef05f0b2da522fef4" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>terminal_std</name></member>
      <member refid="class_gnuplot_1a7b9f721714ffb6aff0d374fcf1c8c90f" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>tmpfile_list</name></member>
      <member refid="class_gnuplot_1acfc7e1f0bc2e131abb9844bdbe7fc01c" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>tmpfile_num</name></member>
      <member refid="class_gnuplot_1a871efce13e856022b3ba36caaa10ea33" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>two_dim</name></member>
      <member refid="class_gnuplot_1a0b8522cb81e46dd4f5a22b7b48f977b1" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_contour</name></member>
      <member refid="class_gnuplot_1a53183e1487bc6977f0d46bf75d19b4d3" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_grid</name></member>
      <member refid="class_gnuplot_1ab8688182047f746090e1e5f2a8c11c9e" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_hidden3d</name></member>
      <member refid="class_gnuplot_1ace901a18ab1a459213afd3ee0233b5ce" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_legend</name></member>
      <member refid="class_gnuplot_1aad76cdec16cfb5fdf82f45ed2786f4d8" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_multiplot</name></member>
      <member refid="class_gnuplot_1ad9dfbccd66dece1dbe5803605c6ab08c" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_smooth</name></member>
      <member refid="class_gnuplot_1a4ebddacbec61aa3e7bc4b89f508ad621" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_surface</name></member>
      <member refid="class_gnuplot_1aca0aeb1dc0ac8d7e68ba6a15a977be28" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_title</name></member>
      <member refid="class_gnuplot_1a7b178184260f1498cd0c11a197ea0ac2" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_xlogscale</name></member>
      <member refid="class_gnuplot_1a9217543dd49c4802b1194d42c5e10b6d" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_ylogscale</name></member>
      <member refid="class_gnuplot_1afa67f022ca344593b054d7f2e3406c7e" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>unset_zlogscale</name></member>
      <member refid="class_gnuplot_1a0155f4026915ed9b05b18c1e89ba9757" prot="private" virt="non-virtual"><scope>Gnuplot</scope><name>valid</name></member>
      <member refid="class_gnuplot_1a78a68f621caa87d1f34324fcd093c7bd" prot="public" virt="non-virtual"><scope>Gnuplot</scope><name>~Gnuplot</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
