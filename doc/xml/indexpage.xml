<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>KeyCpp</title>
    <detaileddescription>
<para><heading level="1">Download Source</heading>
</para><para>Right now you must download the source by cloning the git repository from <ulink url="http://code.google.com/p/keycpp/source/checkout">code.google.com/p/keycpp/</ulink>. In the future as the library matures, there will be a compressed file to download and possibly a package for Debian/Ubuntu.</para><para><heading level="2">Dependencies</heading>
</para><para>Currently this project makes use of the <ulink url="http://www.sourceforge.net/projects/kissfft/">Kiss FFT</ulink> and <ulink url="http://code.google.com/p/gnuplot-cpp/">gnuplot-cpp</ulink> open source projects as well as the <ulink url="http://www.netlib.org/lapack/">LAPACK</ulink> libraries, <ulink url="http://www.gnuplot.info/">Gnuplot</ulink> plotting program, and the <ulink url="http://www.boost.org/doc/libs/1_54_0/libs/numeric/odeint/doc/html/index.html">Boost odeint</ulink> library. The sources from <ulink url="http://www.sourceforge.net/projects/kissfft/">Kiss FFT</ulink> and <ulink url="http://code.google.com/p/gnuplot-cpp/">gnuplot-cpp</ulink> have been incorporated into this project.</para><para>The <emphasis>only</emphasis> extra dependencies that you need on your system are the <ulink url="http://www.netlib.org/lapack/">LAPACK</ulink> libraries, <ulink url="http://www.gnuplot.info/">Gnuplot</ulink>, and the <ulink url="http://www.boost.org/doc/libs/1_54_0/libs/numeric/odeint/doc/html/index.html">Boost odeint</ulink> library.</para><para><heading level="3">Ubuntu (and various <ulink url="https://wiki.ubuntu.com/UbuntuFlavors">flavors</ulink>)</heading>
</para><para>To acquire all the required dependencies you can execute the following commands:</para><para><computeroutput>sudo apt-get install build-essential</computeroutput></para><para>Until Ubuntu 13.10 comes out in October 2013, you need to install <ulink url="http://headmyshoulder.github.io/odeint-v2/">odeint</ulink> from their website. The way I did it was to install Boost (see below) and then copy the odeint header and source files into the appropriate Boost folders. This is because odeint first appears in Boost 1.53 and the newest version in the repository for Ubuntu 13.04 is 1.49.</para><para><computeroutput>sudo apt-get install libboost-all-dev</computeroutput></para><para><computeroutput>sudo apt-get install libblas3gf libblas-doc libblas-dev</computeroutput></para><para><computeroutput>sudo apt-get install liblapack3gf liblapack-doc liblapack-dev</computeroutput></para><para><heading level="3">Other Operating Systems</heading>
</para><para>Your mileage may vary.</para><para><heading level="2">Installation &amp; Usage</heading>
</para><para><emphasis>This library uses features only available in the <ulink url="https://en.wikipedia.org/wiki/C%2B%2B11">C++11 standard</ulink>. YOU MUST <ulink url="http://gcc.gnu.org/projects/cxx0x.html">COMPILE</ulink> WITH THIS STANDARD.</emphasis></para><para>To install KeyCpp onto your system first clone the git repository to a directory of your choice: <computeroutput>git clone <ulink url="https://code.google.com/p/keycpp/">https://code.google.com/p/keycpp/</ulink></computeroutput></para><para>The following command will compile the KeyCpp library and provide links to the library and header files in Ubuntu&apos;s default location:</para><para><computeroutput>sudo ./INSTALL</computeroutput></para><para>To uninstall the KeyCpp library, use the following command:</para><para><computeroutput>sudo ./UNINSTALL</computeroutput></para><para>If everything was successful, you should be able to compile and run the example program:</para><para><computeroutput>cd examples</computeroutput></para><para><computeroutput>g++ -c -o obj/example.o example.cpp -std=c++11</computeroutput></para><para><computeroutput>g++ -o example obj/example.o -std=c++11 -lkeycpp -llapack</computeroutput></para><para><computeroutput>./example</computeroutput></para><para>When you are writing your own programs be sure to link with the <computeroutput>libkeycpp.a</computeroutput> and <computeroutput>liblapack.a</computeroutput> libraries. With <computeroutput>g++</computeroutput> the form is the same as used above. <emphasis>DO NOT FORGET TO COMPILE WITH THE C++11 STANDARD!</emphasis></para><para><heading level="1">Example Code</heading>
</para><para><bold><computeroutput>example.cpp</bold></computeroutput> <programlisting><codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;keycpp/keycpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">keycpp;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>class<sp/>for<sp/>our<sp/>ordinary<sp/>differential<sp/>equation<sp/>that<sp/>we<sp/>will<sp/>use<sp/>later:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_ode_class" kindref="compound">OdeClass</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;double&gt;<sp/>&amp;y,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>&amp;dy,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy[0]<sp/>=<sp/>y[1]*y[2];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy[1]<sp/>=<sp/>-y[0]*y[2];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy[2]<sp/>=<sp/>-0.51*y[0]*y[1];</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>lets<sp/>create<sp/>some<sp/>data:<sp/>y1<sp/>=<sp/>t^2<sp/>and<sp/>y2<sp/>=<sp/>t^3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>t<sp/>=<sp/><ref refid="namespacekeycpp_1ab57eee495c93eb18ebf8c8ccf4d44e74" kindref="member" tooltip="Produces a vector containing N values equally spaced between x1 and x2, inclusively.">linspace</ref>(-2.0,2.0,100);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>y1<sp/>=<sp/>etimes(t,t);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>y2<sp/>=<sp/>etimes(t,etimes(t,t));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>lets<sp/>plot<sp/>the<sp/>data<sp/>we<sp/>just<sp/>created:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkeycpp_1_1_figure" kindref="compound">Figure</ref><sp/>h1;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.plot(t,y1,</highlight><highlight class="stringliteral">&quot;b-&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;linewidth&quot;</highlight><highlight class="normal">,2);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.hold_on();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.plot(t,y2,</highlight><highlight class="stringliteral">&quot;r--&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;linewidth&quot;</highlight><highlight class="normal">,2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.grid_on();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.xlabel(</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.ylabel(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>h1.legend({</highlight><highlight class="stringliteral">&quot;y1<sp/>=<sp/>t^2&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;y2<sp/>=<sp/>t^3&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(h1,</highlight><highlight class="stringliteral">&quot;fontsize&quot;</highlight><highlight class="normal">,14);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>how<sp/>to<sp/>solve<sp/>linear<sp/>equations<sp/>of<sp/>the<sp/>form<sp/>Ax<sp/>=<sp/>b:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix&lt;double&gt;</ref><sp/>A<sp/>=<sp/>{{1.0,<sp/>2.0},</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1.0,-1.0}};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>b<sp/>=<sp/>{1.1,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.1};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>x<sp/>=<sp/>linsolve(A,b);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>result<sp/>to<sp/>the<sp/>screen:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>x;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>lets<sp/>do<sp/>something<sp/>a<sp/>little<sp/>more<sp/>complicated,<sp/>solve<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ordinary<sp/>differential<sp/>equation<sp/>(ODE):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y(1)&apos;<sp/>=<sp/>y(2)*y(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y(2)&apos;<sp/>=<sp/>-y(1)*y(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y(3)&apos;<sp/>=<sp/>0.51*y(1)*y(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>initial<sp/>conditions<sp/>at<sp/>t<sp/>=<sp/>0:<sp/>y(1)<sp/>=<sp/>0;<sp/>y(2)<sp/>=<sp/>1;<sp/>y(3)<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_ode_class" kindref="compound">OdeClass</ref><sp/>myOde;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>t2<sp/>=<sp/><ref refid="namespacekeycpp_1ab57eee495c93eb18ebf8c8ccf4d44e74" kindref="member" tooltip="Produces a vector containing N values equally spaced between x1 and x2, inclusively.">linspace</ref>(0.0,12.0,100);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>ICs<sp/>=<sp/>{0.0,<sp/>1.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix&lt;double&gt;</ref><sp/>y<sp/>=<sp/>ode45(myOde,<sp/>t2,<sp/>ICs);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>we<sp/>have<sp/>solved<sp/>the<sp/>ODE,<sp/>lets<sp/>plot<sp/>the<sp/>results:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkeycpp_1_1_figure" kindref="compound">Figure</ref><sp/>h2;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.plot(t2,y.getCol(0),</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.hold_on();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.plot(t2,y.getCol(1),</highlight><highlight class="stringliteral">&quot;-.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.plot(t2,y.getCol(2),</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.xlabel(</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.ylabel(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(h2,</highlight><highlight class="stringliteral">&quot;fontsize&quot;</highlight><highlight class="normal">,14);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>h2.title(</highlight><highlight class="stringliteral">&quot;ODE<sp/>Solution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
</programlisting> <linebreak/>
 <bold><computeroutput>Text</computeroutput> Output</bold> <programlisting><codeline lineno="1"><highlight class="normal">1.76667</highlight></codeline>
<codeline lineno="2"><highlight class="normal">-0.333333</highlight></codeline>
</programlisting> <linebreak/>
 <bold><computeroutput>Plot</computeroutput> Output</bold> <image type="html" name="plot1.png"></image>
 <linebreak/>
 <image type="html" name="plot2.png"></image>
 <linebreak/>
</para><para><heading level="1">MATLAB/Octave to KeyCpp Conversion Chart</heading>
</para><para>Although the goal of this library is to offer a C++ interface similar in syntax to MATLAB/Octave, there are some minor differences. The goal of this document is to provide a conversion chart for some of the most commonly used features.</para><para>Note: You can omit the <computeroutput>keycpp::</computeroutput> prefix from the following commands by placing <computeroutput>using namespace keycpp;</computeroutput> in the same scope. This shortcut should be used with care as collisions with other libraries are possible.</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para><emphasis>MATLAB/Octave</emphasis> </para></entry><entry thead="yes"><para><emphasis>KeyCpp</emphasis> </para></entry><entry thead="yes"><para>Notes </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A(1,1)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>A(0,0);</computeroutput> </para></entry><entry thead="no"><para>Indexing starts at 0 in KeyCpp </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A(N,N)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>A(N-1,N-1);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>size(A,1)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>keycpp::size(A,1);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>size(A,2)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>keycpp::size(A,2);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A(:,k)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>A.getCol(k-1);</computeroutput> </para></entry><entry thead="no"><para>C++ restricts the use of <computeroutput>:</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A(k,:)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>A.getRow(k-1);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A.&apos;</computeroutput> </para></entry><entry thead="no"><para><computeroutput>keycpp::transpose(A);</computeroutput> </para></entry><entry thead="no"><para>C++ does not allow overloading <computeroutput>.&apos;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A = zeros(m,n)</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classkeycpp_1_1matrix" kindref="compound">keycpp::matrix</ref>&lt;double&gt; A = <ref refid="namespacekeycpp_1a86f1406f9fad5a439d8eff01aba8eac6" kindref="member">keycpp::zeros</ref>&lt;double&gt;(m,n);</computeroutput> </para></entry><entry thead="no"><para>or more simply: <computeroutput><ref refid="classkeycpp_1_1matrix" kindref="compound">keycpp::matrix</ref>&lt;double&gt; A(m,n);</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A = ones(m,n)</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classkeycpp_1_1matrix" kindref="compound">keycpp::matrix</ref>&lt;double&gt; A = <ref refid="namespacekeycpp_1ace6f21832ab61f8f15e5b35e0a5cdb3e" kindref="member">keycpp::ones</ref>&lt;double&gt;(m,n);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A.*B</computeroutput> </para></entry><entry thead="no"><para><computeroutput>keycpp::etimes(A,B);</computeroutput> </para></entry><entry thead="no"><para>C++ does not allow overloading <computeroutput>.*</computeroutput> or <computeroutput>./</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A./B</computeroutput> </para></entry><entry thead="no"><para><computeroutput>keycpp::edivide(A,B);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A\b</computeroutput> </para></entry><entry thead="no"><para><computeroutput>keycpp::linsolve(A,b);</computeroutput> </para></entry><entry thead="no"><para><computeroutput>b</computeroutput> is a vector </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>[V, D] = eig(A,B)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::vector&lt;std::complex&lt;double&gt;&gt; d = keycpp::eig(A,B,&amp;V);</computeroutput> </para></entry><entry thead="no"><para>Non-Hermitian generalized eigenvalue/eigenvector solver uses LAPACK. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>x = linspace(0,10,N_x)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::vector&lt;double&gt; x = <ref refid="namespacekeycpp_1ab57eee495c93eb18ebf8c8ccf4d44e74" kindref="member">keycpp::linspace</ref>(0.0,10.0,N_x);</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para><computeroutput>x = logspace(1,3,N_x)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>std::vector&lt;double&gt; x = <ref refid="namespacekeycpp_1ac92462e3b25414144d4e45fc269d2f13" kindref="member">keycpp::logspace</ref>(1.0,3.0,N_x);</computeroutput> </para></entry><entry thead="no"><para><computeroutput>10 &lt;= x &lt;= 1000</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A = diag([a1, a2, a3])</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classkeycpp_1_1matrix" kindref="compound">keycpp::matrix</ref>&lt;double&gt; A = keycpp::diag({a1, a2, a3});</computeroutput> </para></entry><entry thead="no"><para><computeroutput>a1</computeroutput>, <computeroutput>a2</computeroutput>, and <computeroutput>a3</computeroutput> are scalar elements of <computeroutput>A</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>A = [[a1, a2]; [a3, a4]]</computeroutput> </para></entry><entry thead="no"><para><computeroutput><ref refid="classkeycpp_1_1matrix" kindref="compound">keycpp::matrix</ref>&lt;double&gt; A = {{a1, a2}, {a3, a4}};</computeroutput> </para></entry><entry thead="no"><para></para></entry></row>
</table>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
