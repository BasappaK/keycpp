<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="__kiss__fft__guts_8h" kind="file">
    <compoundname>_kiss_fft_guts.h</compoundname>
    <includes refid="kiss__fft_8h" local="yes">kiss_fft.h</includes>
    <includes local="no">limits.h</includes>
    <includedby refid="keycpp_8h" local="yes">keycpp.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>kiss_fft.h</label>
        <link refid="kiss__fft_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="0">
        <label>_kiss_fft_guts.h</label>
        <link refid="_kiss_fft_guts.h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>keycpp.h</label>
        <link refid="keycpp_8h"/>
      </node>
      <node id="7">
        <label>_kiss_fft_guts.h</label>
        <link refid="_kiss_fft_guts.h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structkiss__fft__state" prot="public">kiss_fft_state</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="__kiss__fft__guts_8h_1af176a125e008eb443996cf0f83cc135c" prot="public" static="no">
        <name>MAXFACTORS</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="25" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a944e08f3916c56a9697bbfed458eaa94" prot="public" static="no">
        <name>S_MUL</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>( (a)*(b) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="89" column="12" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1ab5092aa032092f1057feca5fbea40758" prot="public" static="no">
        <name>C_MUL</name>
        <param><defname>m</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>do{ (m).r = (a).r*(b).r - (a).i*(b).i;\
        (m).i = (a).r*(b).i + (a).i*(b).r; }while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="90" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a05e11bb1e8e815dd7bdd199060b7555a" prot="public" static="no">
        <name>C_FIXDIV</name>
        <param><defname>c</defname></param>
        <param><defname>div</defname></param>
        <initializer>/* NOOP */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="93" column="12" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a958da96ff02cad6be35cafa3019804b5" prot="public" static="no">
        <name>C_MULBYSCALAR</name>
        <param><defname>c</defname></param>
        <param><defname>s</defname></param>
        <initializer>do{ (c).r *= (s);\
        (c).i *= (s); }while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="94" column="12" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a664c056b2a7093f88391d7db3558aa24" prot="public" static="no">
        <name>CHECK_OVERFLOW_OP</name>
        <param><defname>a</defname></param>
        <param><defname>op</defname></param>
        <param><defname>b</defname></param>
        <initializer>/* noop */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="100" column="11" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a1f70747639c855259a0965de768e030a" prot="public" static="no">
        <name>C_ADD</name>
        <param><defname>res</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>do { \
	    CHECK_OVERFLOW_OP((a).r,+,(b).r)\
	    CHECK_OVERFLOW_OP((a).i,+,(b).i)\
	    (res).r=(a).r+(b).r;  (res).i=(a).i+(b).i; \
    }while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="103" column="10" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a8c00bd9702f25a8514402a3779b3bdda" prot="public" static="no">
        <name>C_SUB</name>
        <param><defname>res</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>do { \
	    CHECK_OVERFLOW_OP((a).r,-,(b).r)\
	    CHECK_OVERFLOW_OP((a).i,-,(b).i)\
	    (res).r=(a).r-(b).r;  (res).i=(a).i-(b).i; \
    }while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="109" column="10" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a2042ee8c6fb9306eb20d62e6506446aa" prot="public" static="no">
        <name>C_ADDTO</name>
        <param><defname>res</defname></param>
        <param><defname>a</defname></param>
        <initializer>do { \
	    CHECK_OVERFLOW_OP((res).r,+,(a).r)\
	    CHECK_OVERFLOW_OP((res).i,+,(a).i)\
	    (res).r += (a).r;  (res).i += (a).i;\
    }while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="115" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1aa3f448e1963492dfc145fc391cbedd27" prot="public" static="no">
        <name>C_SUBFROM</name>
        <param><defname>res</defname></param>
        <param><defname>a</defname></param>
        <initializer>do {\
	    CHECK_OVERFLOW_OP((res).r,-,(a).r)\
	    CHECK_OVERFLOW_OP((res).i,-,(a).i)\
	    (res).r -= (a).r;  (res).i -= (a).i; \
    }while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="122" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a2e780e8fe86d9c3e7b6a469f61aaf5d1" prot="public" static="no">
        <name>KISS_FFT_COS</name>
        <param><defname>phase</defname></param>
        <initializer>(kiss_fft_scalar) cos(phase)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="139" column="12" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a2d4fc93cde15512f1946f364d5271dd3" prot="public" static="no">
        <name>KISS_FFT_SIN</name>
        <param><defname>phase</defname></param>
        <initializer>(kiss_fft_scalar) sin(phase)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="140" column="11" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1a0b812a30fdb0c530a90a18d1692fab6c" prot="public" static="no">
        <name>HALF_OF</name>
        <param><defname>x</defname></param>
        <initializer>((x)*.5f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="141" column="11" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1ac7852abdf2dc5ed4538551be6d1dd20b" prot="public" static="no">
        <name>kf_cexp</name>
        <param><defname>x</defname></param>
        <param><defname>phase</defname></param>
        <initializer>do{ \
		(x)-&gt;r = KISS_FFT_COS(phase);\
		(x)-&gt;i = KISS_FFT_SIN(phase);\
	}while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="144" column="10" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1ac1abb41ecdedd05dda5d1ce83b67a704" prot="public" static="no">
        <name>pcpx</name>
        <param><defname>c</defname></param>
        <initializer>fprintf(stderr,&quot;%g + %gi\n&quot;,(double)((c)-&gt;r),(double)((c)-&gt;i) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="152" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1abd992e9886fb74f97bf0b6e057fe08a5" prot="public" static="no">
        <name>KISS_FFT_TMP_ALLOC</name>
        <param><defname>nbytes</defname></param>
        <initializer>KISS_FFT_MALLOC(nbytes)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="165" column="11" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="__kiss__fft__guts_8h_1ab915c572fe96a51a3528b7419248b655" prot="public" static="no">
        <name>KISS_FFT_TMP_FREE</name>
        <param><defname>ptr</defname></param>
        <initializer>KISS_FFT_FREE(ptr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="166" column="10" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a1d97d74ec66398db90ac4e6ae08ffa80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_bfly2</definition>
        <argsstring>(kiss_fft_cpx *Fout, const size_t fstride, const kiss_fft_cfg st, int m)</argsstring>
        <name>kf_bfly2</name>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>Fout</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fstride</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="169" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="169" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a0976fd89e0c02bf44e5df3b689dfe115" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_bfly4</definition>
        <argsstring>(kiss_fft_cpx *Fout, const size_t fstride, const kiss_fft_cfg st, const size_t m)</argsstring>
        <name>kf_bfly4</name>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>Fout</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fstride</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="192" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="192" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a6b2ff941baf8c5dc00828591927ce4d6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_bfly3</definition>
        <argsstring>(kiss_fft_cpx *Fout, const size_t fstride, const kiss_fft_cfg st, size_t m)</argsstring>
        <name>kf_bfly3</name>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>Fout</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fstride</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="240" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="240" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1afae5a86498c64fc9a8ccc4032de62ee0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_bfly5</definition>
        <argsstring>(kiss_fft_cpx *Fout, const size_t fstride, const kiss_fft_cfg st, int m)</argsstring>
        <name>kf_bfly5</name>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>Fout</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fstride</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="284" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="284" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a43383279ff41679c7ae47bc163d7050c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_bfly_generic</definition>
        <argsstring>(kiss_fft_cpx *Fout, const size_t fstride, const kiss_fft_cfg st, int m, int p)</argsstring>
        <name>kf_bfly_generic</name>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>Fout</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fstride</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="346" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="346" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a96e4f47862a2df7183ae9e8caaf7a866" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_work</definition>
        <argsstring>(kiss_fft_cpx *Fout, const kiss_fft_cpx *f, const size_t fstride, int in_stride, int *factors, const kiss_fft_cfg st)</argsstring>
        <name>kf_work</name>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>Fout</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>fstride</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_stride</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>factors</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="387" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="387" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a4472db9715ee64fc7858ba895054f734" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void kf_factor</definition>
        <argsstring>(int n, int *facbuf)</argsstring>
        <name>kf_factor</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>facbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="458" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="458" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1ab5ad1560b58375ec071da45401911358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
        <definition>kiss_fft_cfg kiss_fft_alloc</definition>
        <argsstring>(int nfft, int inverse_fft, void *mem, size_t *lenmem)</argsstring>
        <name>kiss_fft_alloc</name>
        <param>
          <type>int</type>
          <declname>nfft</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inverse_fft</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>lenmem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="488" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="488" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1aec345dab68815f4c5c2904978626d877" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kiss_fft_stride</definition>
        <argsstring>(kiss_fft_cfg st, const kiss_fft_cpx *fin, kiss_fft_cpx *fout, int in_stride)</argsstring>
        <name>kiss_fft_stride</name>
        <param>
          <type><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>st</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="520" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="520" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1ab36e2bb33b74c1a7eabe3271d0916030" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kiss_fft</definition>
        <argsstring>(kiss_fft_cfg cfg, const kiss_fft_cpx *fin, kiss_fft_cpx *fout)</argsstring>
        <name>kiss_fft</name>
        <param>
          <type><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="534" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="534" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1aab7972365fc8f30a13eed91fa29172ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kiss_fft_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>kiss_fft_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="540" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="__kiss__fft__guts_8h_1a26b8ac31a43a356943061318831508e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int kiss_fft_next_fast_size</definition>
        <argsstring>(int n)</argsstring>
        <name>kiss_fft_next_fast_size</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" line="545" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="545" bodyend="557"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2003-2010,<sp/>Mark<sp/>Borgerding</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>author<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>any<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>kiss_fft.h</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/>defines<sp/>kiss_fft_scalar<sp/>as<sp/>either<sp/>short<sp/>or<sp/>a<sp/>float<sp/>type</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>and<sp/>defines</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>typedef<sp/>struct<sp/>{<sp/>kiss_fft_scalar<sp/>r;<sp/>kiss_fft_scalar<sp/>i;<sp/>}kiss_fft_cpx;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KISS_FFT_GUTS_H</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KISS_FFT_GUTS_H</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;kiss_fft.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXFACTORS<sp/>32</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>e.g.<sp/>an<sp/>fft<sp/>of<sp/>length<sp/>128<sp/>has<sp/>4<sp/>factors<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>as<sp/>far<sp/>as<sp/>kissfft<sp/>is<sp/>concerned</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>4*4*4*2</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structkiss__fft__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_state</ref>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfft;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inverse;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>factors[2*MAXFACTORS];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>twiddles[1];</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>Explanation<sp/>of<sp/>macros<sp/>dealing<sp/>with<sp/>complex<sp/>math:</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>C_MUL(m,a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m<sp/>=<sp/>a*b</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>C_FIXDIV(<sp/>c<sp/>,<sp/>div<sp/>)<sp/><sp/>:<sp/>if<sp/>a<sp/>fixed<sp/>point<sp/>impl.,<sp/>c<sp/>/=<sp/>div.<sp/>noop<sp/>otherwise</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>C_SUB(<sp/>res,<sp/>a,b)<sp/><sp/><sp/><sp/><sp/>:<sp/>res<sp/>=<sp/>a<sp/>-<sp/>b</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>C_SUBFROM(<sp/>res<sp/>,<sp/>a)<sp/><sp/>:<sp/>res<sp/>-=<sp/>a</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>C_ADDTO(<sp/>res<sp/>,<sp/>a)<sp/><sp/><sp/><sp/>:<sp/>res<sp/>+=<sp/>a</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FIXED_POINT</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>(FIXED_POINT==32)</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FRACBITS<sp/>31</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>SAMPPROD<sp/>int64_t</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SAMP_MAX<sp/>2147483647</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>FRACBITS<sp/>15</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>SAMPPROD<sp/>int32_t<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SAMP_MAX<sp/>32767</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SAMP_MIN<sp/>-SAMP_MAX</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CHECK_OVERFLOW)</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CHECK_OVERFLOW_OP(a,op,b)<sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>(SAMPPROD)(a)<sp/>op<sp/>(SAMPPROD)(b)<sp/>&gt;<sp/>SAMP_MAX<sp/>||<sp/>(SAMPPROD)(a)<sp/>op<sp/>(SAMPPROD)(b)<sp/>&lt;<sp/>SAMP_MIN<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;WARNING:overflow<sp/>@<sp/>&quot;<sp/>__FILE__<sp/>&quot;(%d):<sp/>(%d<sp/>&quot;<sp/>#op&quot;<sp/>%d)<sp/>=<sp/>%ld\n&quot;,__LINE__,(a),(b),(SAMPPROD)(a)<sp/>op<sp/>(SAMPPROD)(b)<sp/>);<sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>smul(a,b)<sp/>(<sp/>(SAMPPROD)(a)*(b)<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>sround(<sp/>x<sp/>)<sp/><sp/>(kiss_fft_scalar)(<sp/>(<sp/>(x)<sp/>+<sp/>(1&lt;&lt;(FRACBITS-1))<sp/>)<sp/>&gt;&gt;<sp/>FRACBITS<sp/>)</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>S_MUL(a,b)<sp/>sround(<sp/>smul(a,b)<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>C_MUL(m,a,b)<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do{<sp/>(m).r<sp/>=<sp/>sround(<sp/>smul((a).r,(b).r)<sp/>-<sp/>smul((a).i,(b).i)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m).i<sp/>=<sp/>sround(<sp/>smul((a).r,(b).i)<sp/>+<sp/>smul((a).i,(b).r)<sp/>);<sp/>}while(0)</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>DIVSCALAR(x,k)<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x)<sp/>=<sp/>sround(<sp/>smul(<sp/><sp/>x,<sp/>SAMP_MAX/k<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>C_FIXDIV(c,div)<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/>DIVSCALAR(<sp/>(c).r<sp/>,<sp/>div);<sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DIVSCALAR(<sp/>(c).i<sp/><sp/>,<sp/>div);<sp/>}while<sp/>(0)</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>C_MULBYSCALAR(<sp/>c,<sp/>s<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do{<sp/>(c).r<sp/>=<sp/><sp/>sround(<sp/>smul(<sp/>(c).r<sp/>,<sp/>s<sp/>)<sp/>)<sp/>;\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c).i<sp/>=<sp/><sp/>sround(<sp/>smul(<sp/>(c).i<sp/>,<sp/>s<sp/>)<sp/>)<sp/>;<sp/>}while(0)</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>not<sp/>FIXED_POINT*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>S_MUL(a,b)<sp/>(<sp/>(a)*(b)<sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>C_MUL(m,a,b)<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do{<sp/>(m).r<sp/>=<sp/>(a).r*(b).r<sp/>-<sp/>(a).i*(b).i;\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m).i<sp/>=<sp/>(a).r*(b).i<sp/>+<sp/>(a).i*(b).r;<sp/>}while(0)</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>C_FIXDIV(c,div)<sp/></highlight><highlight class="comment">/*<sp/>NOOP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>C_MULBYSCALAR(<sp/>c,<sp/>s<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do{<sp/>(c).r<sp/>*=<sp/>(s);\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(c).i<sp/>*=<sp/>(s);<sp/>}while(0)</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CHECK_OVERFLOW_OP</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CHECK_OVERFLOW_OP(a,op,b)<sp/></highlight><highlight class="comment">/*<sp/>noop<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>C_ADD(<sp/>res,<sp/>a,b)\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((a).r,+,(b).r)\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((a).i,+,(b).i)\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(res).r=(a).r+(b).r;<sp/><sp/>(res).i=(a).i+(b).i;<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}while(0)</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/><sp/>C_SUB(<sp/>res,<sp/>a,b)\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((a).r,-,(b).r)\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((a).i,-,(b).i)\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(res).r=(a).r-(b).r;<sp/><sp/>(res).i=(a).i-(b).i;<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}while(0)</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>C_ADDTO(<sp/>res<sp/>,<sp/>a)\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((res).r,+,(a).r)\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((res).i,+,(a).i)\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(res).r<sp/>+=<sp/>(a).r;<sp/><sp/>(res).i<sp/>+=<sp/>(a).i;\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}while(0)</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>C_SUBFROM(<sp/>res<sp/>,<sp/>a)\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((res).r,-,(a).r)\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_OVERFLOW_OP((res).i,-,(a).i)\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(res).r<sp/>-=<sp/>(a).r;<sp/><sp/>(res).i<sp/>-=<sp/>(a).i;<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}while(0)</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FIXED_POINT</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>KISS_FFT_COS(phase)<sp/><sp/>floor(.5+SAMP_MAX<sp/>*<sp/>cos<sp/>(phase))</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>KISS_FFT_SIN(phase)<sp/><sp/>floor(.5+SAMP_MAX<sp/>*<sp/>sin<sp/>(phase))</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>HALF_OF(x)<sp/>((x)&gt;&gt;1)</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(USE_SIMD)</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>KISS_FFT_COS(phase)<sp/>_mm_set1_ps(<sp/>cos(phase)<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>KISS_FFT_SIN(phase)<sp/>_mm_set1_ps(<sp/>sin(phase)<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>HALF_OF(x)<sp/>((x)*_mm_set1_ps(.5))</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>KISS_FFT_COS(phase)<sp/>(kiss_fft_scalar)<sp/>cos(phase)</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>KISS_FFT_SIN(phase)<sp/>(kiss_fft_scalar)<sp/>sin(phase)</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>HALF_OF(x)<sp/>((x)*.5f)</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>kf_cexp(x,phase)<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do{<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x)-&gt;r<sp/>=<sp/>KISS_FFT_COS(phase);\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x)-&gt;i<sp/>=<sp/>KISS_FFT_SIN(phase);\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}while(0)</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>a<sp/>debugging<sp/>function<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pcpx(c)\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fprintf(stderr,&quot;%g<sp/>+<sp/>%gi\n&quot;,(double)((c)-&gt;r),(double)((c)-&gt;i)<sp/>)</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KISS_FFT_USE_ALLOCA</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>define<sp/>this<sp/>to<sp/>allow<sp/>use<sp/>of<sp/>alloca<sp/>instead<sp/>of<sp/>malloc<sp/>for<sp/>temporary<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Temporary<sp/>buffers<sp/>are<sp/>used<sp/>in<sp/>two<sp/>case:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>FFT<sp/>sizes<sp/>that<sp/>have<sp/>&quot;bad&quot;<sp/>factors.<sp/>i.e.<sp/>not<sp/>2,3<sp/>and<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>&quot;in-place&quot;<sp/>FFTs.<sp/><sp/>Notice<sp/>the<sp/>quotes,<sp/>since<sp/>kissfft<sp/>does<sp/>not<sp/>really<sp/>do<sp/>an<sp/>in-place<sp/>transform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;alloca.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>KISS_FFT_TMP_ALLOC(nbytes)<sp/>alloca(nbytes)</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/><sp/>KISS_FFT_TMP_FREE(ptr)<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/><sp/>KISS_FFT_TMP_ALLOC(nbytes)<sp/>KISS_FFT_MALLOC(nbytes)</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/><sp/>KISS_FFT_TMP_FREE(ptr)<sp/>KISS_FFT_FREE(ptr)</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_bfly2(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fstride,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout2;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>tw1<sp/>=<sp/>st-&gt;twiddles;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>t;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout2<sp/>=<sp/>Fout<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_FIXDIV(*Fout,2);<sp/>C_FIXDIV(*Fout2,2);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL<sp/>(t,<sp/><sp/>*Fout2<sp/>,<sp/>*tw1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw1<sp/>+=<sp/>fstride;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(<sp/>*Fout2<sp/>,<sp/><sp/>*Fout<sp/>,<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADDTO(<sp/>*Fout<sp/>,<sp/><sp/>t<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Fout2;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Fout;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--m);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_bfly4(</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fstride,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*tw1,*tw2,*tw3;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>scratch[6];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k=m;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m2=2*m;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m3=3*m;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>tw3<sp/>=<sp/>tw2<sp/>=<sp/>tw1<sp/>=<sp/>st-&gt;twiddles;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_FIXDIV(*Fout,4);<sp/>C_FIXDIV(Fout[m],4);<sp/>C_FIXDIV(Fout[m2],4);<sp/>C_FIXDIV(Fout[m3],4);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[0],Fout[m]<sp/>,<sp/>*tw1<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[1],Fout[m2]<sp/>,<sp/>*tw2<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[2],Fout[m3]<sp/>,<sp/>*tw3<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(<sp/>scratch[5]<sp/>,<sp/>*Fout,<sp/>scratch[1]<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADDTO(*Fout,<sp/>scratch[1]);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADD(<sp/>scratch[3]<sp/>,<sp/>scratch[0]<sp/>,<sp/>scratch[2]<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(<sp/>scratch[4]<sp/>,<sp/>scratch[0]<sp/>,<sp/>scratch[2]<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(<sp/>Fout[m2],<sp/>*Fout,<sp/>scratch[3]<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw1<sp/>+=<sp/>fstride;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw2<sp/>+=<sp/>fstride*2;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw3<sp/>+=<sp/>fstride*3;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADDTO(<sp/>*Fout<sp/>,<sp/>scratch[3]<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(st-&gt;inverse)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].r<sp/>=<sp/>scratch[5].r<sp/>-<sp/>scratch[4].i;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].i<sp/>=<sp/>scratch[5].i<sp/>+<sp/>scratch[4].r;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m3].r<sp/>=<sp/>scratch[5].r<sp/>+<sp/>scratch[4].i;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m3].i<sp/>=<sp/>scratch[5].i<sp/>-<sp/>scratch[4].r;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].r<sp/>=<sp/>scratch[5].r<sp/>+<sp/>scratch[4].i;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].i<sp/>=<sp/>scratch[5].i<sp/>-<sp/>scratch[4].r;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m3].r<sp/>=<sp/>scratch[5].r<sp/>-<sp/>scratch[4].i;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m3].i<sp/>=<sp/>scratch[5].i<sp/>+<sp/>scratch[4].r;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Fout;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(--k);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_bfly3(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fstride,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k=m;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m2<sp/>=<sp/>2*m;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*tw1,*tw2;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>scratch[5];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>epi3;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>epi3<sp/>=<sp/>st-&gt;twiddles[fstride*m];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>tw1=tw2=st-&gt;twiddles;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_FIXDIV(*Fout,3);<sp/>C_FIXDIV(Fout[m],3);<sp/>C_FIXDIV(Fout[m2],3);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[1],Fout[m]<sp/>,<sp/>*tw1);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[2],Fout[m2]<sp/>,<sp/>*tw2);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADD(scratch[3],scratch[1],scratch[2]);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(scratch[0],scratch[1],scratch[2]);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw1<sp/>+=<sp/>fstride;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tw2<sp/>+=<sp/>fstride*2;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].r<sp/>=<sp/>Fout-&gt;r<sp/>-<sp/>HALF_OF(scratch[3].r);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].i<sp/>=<sp/>Fout-&gt;i<sp/>-<sp/>HALF_OF(scratch[3].i);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MULBYSCALAR(<sp/>scratch[0]<sp/>,<sp/>epi3.i<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADDTO(*Fout,scratch[3]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m2].r<sp/>=<sp/>Fout[m].r<sp/>+<sp/>scratch[0].i;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m2].i<sp/>=<sp/>Fout[m].i<sp/>-<sp/>scratch[0].r;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].r<sp/>-=<sp/>scratch[0].i;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[m].i<sp/>+=<sp/>scratch[0].r;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Fout;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(--k);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_bfly5(</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fstride,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*Fout0,*Fout1,*Fout2,*Fout3,*Fout4;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>scratch[13];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>twiddles<sp/>=<sp/>st-&gt;twiddles;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*tw;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>ya,yb;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>ya<sp/>=<sp/>twiddles[fstride*m];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>yb<sp/>=<sp/>twiddles[fstride*2*m];</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout0=Fout;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout1=Fout0+m;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout2=Fout0+2*m;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout3=Fout0+3*m;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout4=Fout0+4*m;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>tw=st-&gt;twiddles;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>u=0;<sp/>u&lt;m;<sp/>++u<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_FIXDIV(<sp/>*Fout0,5);<sp/>C_FIXDIV(<sp/>*Fout1,5);<sp/>C_FIXDIV(<sp/>*Fout2,5);<sp/>C_FIXDIV(<sp/>*Fout3,5);<sp/>C_FIXDIV(<sp/>*Fout4,5);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[0]<sp/>=<sp/>*Fout0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[1]<sp/>,*Fout1,<sp/>tw[u*fstride]);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[2]<sp/>,*Fout2,<sp/>tw[2*u*fstride]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[3]<sp/>,*Fout3,<sp/>tw[3*u*fstride]);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(scratch[4]<sp/>,*Fout4,<sp/>tw[4*u*fstride]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADD(<sp/>scratch[7],scratch[1],scratch[4]);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(<sp/>scratch[10],scratch[1],scratch[4]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADD(<sp/>scratch[8],scratch[2],scratch[3]);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(<sp/>scratch[9],scratch[2],scratch[3]);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout0-&gt;r<sp/>+=<sp/>scratch[7].r<sp/>+<sp/>scratch[8].r;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout0-&gt;i<sp/>+=<sp/>scratch[7].i<sp/>+<sp/>scratch[8].i;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[5].r<sp/>=<sp/>scratch[0].r<sp/>+<sp/>S_MUL(scratch[7].r,ya.r)<sp/>+<sp/>S_MUL(scratch[8].r,yb.r);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[5].i<sp/>=<sp/>scratch[0].i<sp/>+<sp/>S_MUL(scratch[7].i,ya.r)<sp/>+<sp/>S_MUL(scratch[8].i,yb.r);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[6].r<sp/>=<sp/><sp/>S_MUL(scratch[10].i,ya.i)<sp/>+<sp/>S_MUL(scratch[9].i,yb.i);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[6].i<sp/>=<sp/>-S_MUL(scratch[10].r,ya.i)<sp/>-<sp/>S_MUL(scratch[9].r,yb.i);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(*Fout1,scratch[5],scratch[6]);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADD(*Fout4,scratch[5],scratch[6]);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[11].r<sp/>=<sp/>scratch[0].r<sp/>+<sp/>S_MUL(scratch[7].r,yb.r)<sp/>+<sp/>S_MUL(scratch[8].r,ya.r);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[11].i<sp/>=<sp/>scratch[0].i<sp/>+<sp/>S_MUL(scratch[7].i,yb.r)<sp/>+<sp/>S_MUL(scratch[8].i,ya.r);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[12].r<sp/>=<sp/>-<sp/>S_MUL(scratch[10].i,yb.i)<sp/>+<sp/>S_MUL(scratch[9].i,ya.i);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[12].i<sp/>=<sp/>S_MUL(scratch[10].r,yb.i)<sp/>-<sp/>S_MUL(scratch[9].r,ya.i);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADD(*Fout2,scratch[11],scratch[12]);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_SUB(*Fout3,scratch[11],scratch[12]);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>perform<sp/>the<sp/>butterfly<sp/>for<sp/>one<sp/>stage<sp/>of<sp/>a<sp/>mixed<sp/>radix<sp/>FFT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_bfly_generic(</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fstride,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u,q1,q;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>twiddles<sp/>=<sp/>st-&gt;twiddles;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>t;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Norig<sp/>=<sp/>st-&gt;nfft;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>scratch<sp/>=<sp/>(<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>*)KISS_FFT_TMP_ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>)*p);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>u=0;<sp/>u&lt;m;<sp/>++u<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k=u;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>q1=0<sp/>;<sp/>q1&lt;p<sp/>;<sp/>++q1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[q1]<sp/>=<sp/>Fout[<sp/>k<sp/><sp/>];</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_FIXDIV(scratch[q1],p);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k=u;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>q1=0<sp/>;<sp/>q1&lt;p<sp/>;<sp/>++q1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>twidx=0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fout[<sp/>k<sp/>]<sp/>=<sp/>scratch[0];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=1;q&lt;p;++q<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twidx<sp/>+=<sp/>fstride<sp/>*<sp/>k;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(twidx&gt;=Norig)<sp/>twidx-=Norig;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_MUL(t,scratch[q]<sp/>,<sp/>twiddles[twidx]<sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C_ADDTO(<sp/>Fout[<sp/>k<sp/>]<sp/>,t);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/>m;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>KISS_FFT_TMP_FREE(scratch);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_work(</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>f,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fstride,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_stride,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>factors,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout_beg=Fout;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=*factors++;<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>radix<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=*factors++;<sp/></highlight><highlight class="comment">/*<sp/>stage&apos;s<sp/>fft<sp/>length/p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>Fout_end<sp/>=<sp/>Fout<sp/>+<sp/>p*m;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>openmp<sp/>extensions<sp/>at<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>top-level<sp/>(not<sp/>recursive)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fstride==1<sp/>&amp;&amp;<sp/>p&lt;=5)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>the<sp/>p<sp/>different<sp/>work<sp/>units<sp/>in<sp/>different<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>omp<sp/>parallel<sp/>for</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;p;++k)<sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kf_work(<sp/>Fout<sp/>+k*m,<sp/>f+<sp/>fstride*in_stride*k,fstride*p,in_stride,factors,st);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>threads<sp/>have<sp/>joined<sp/>by<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>kf_bfly2(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>kf_bfly3(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>kf_bfly4(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/>kf_bfly5(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>kf_bfly_generic(Fout,fstride,st,m,p);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m==1)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Fout<sp/>=<sp/>*f;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>fstride*in_stride;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(++Fout<sp/>!=<sp/>Fout_end<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recursive<sp/>call:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DFT<sp/>of<sp/>size<sp/>m*p<sp/>performed<sp/>by<sp/>doing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>instances<sp/>of<sp/>smaller<sp/>DFTs<sp/>of<sp/>size<sp/>m,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>one<sp/>takes<sp/>a<sp/>decimated<sp/>version<sp/>of<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kf_work(<sp/>Fout<sp/>,<sp/>f,<sp/>fstride*p,<sp/>in_stride,<sp/>factors,st);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>fstride*in_stride;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(Fout<sp/>+=<sp/>m)<sp/>!=<sp/>Fout_end<sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout=Fout_beg;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>recombine<sp/>the<sp/>p<sp/>smaller<sp/>DFTs<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>kf_bfly2(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>kf_bfly3(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>kf_bfly4(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/>kf_bfly5(Fout,fstride,st,m);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>kf_bfly_generic(Fout,fstride,st,m,p);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>facbuf<sp/>is<sp/>populated<sp/>by<sp/>p1,m1,p2,m2,<sp/>...</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/>where<sp/></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/>p[i]<sp/>*<sp/>m[i]<sp/>=<sp/>m[i-1]</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kf_factor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>facbuf)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p=4;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>floor_sqrt;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>floor_sqrt<sp/>=<sp/><ref refid="namespacekeycpp_1ab30437496fbd2011521b31aee7961516" kindref="member" tooltip="Rounds the real and imaginary parts of std::complex&amp;lt;double&amp;gt; a towards negative infinity seperately...">floor</ref>(<sp/><ref refid="namespacekeycpp_1a28a50cdc90b4c6f56bf9a7c144c4ac95" kindref="member" tooltip="Return a vector containing the sqrt of each element of A. ">sqrt</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n)<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*factor<sp/>out<sp/>powers<sp/>of<sp/>4,<sp/>powers<sp/>of<sp/>2,<sp/>then<sp/>any<sp/>remaining<sp/>primes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>p<sp/>=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>p<sp/>=<sp/>3;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>p<sp/>+=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>floor_sqrt)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>n;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>more<sp/>factors,<sp/>skip<sp/>to<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>/=<sp/>p;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*facbuf++<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*facbuf++<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>User-callable<sp/>function<sp/>to<sp/>allocate<sp/>all<sp/>necessary<sp/>storage<sp/>space<sp/>for<sp/>the<sp/>fft.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>The<sp/>return<sp/>value<sp/>is<sp/>a<sp/>contiguous<sp/>block<sp/>of<sp/>memory,<sp/>allocated<sp/>with<sp/>malloc.<sp/><sp/>As<sp/>such,</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>It<sp/>can<sp/>be<sp/>freed<sp/>with<sp/>free(),<sp/>rather<sp/>than<sp/>a<sp/>kiss_fft-specific<sp/>function.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>kiss_fft_alloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfft,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inverse_fft,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>mem,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<sp/>lenmem<sp/>)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st=NULL;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>memneeded<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_state</ref>)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>sizeof(<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>)*(nfft-1);<sp/></highlight><highlight class="comment">/*<sp/>twiddle<sp/>factors*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lenmem==NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st<sp/>=<sp/>(<sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref>)KISS_FFT_MALLOC(<sp/>memneeded<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>*lenmem<sp/>&gt;=<sp/>memneeded)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st<sp/>=<sp/>(<ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref>)mem;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lenmem<sp/>=<sp/>memneeded;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st-&gt;nfft=nfft;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st-&gt;inverse<sp/>=<sp/>inverse_fft;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;nfft;++i)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pi=3.141592653589793238462643383279502884197169399375105820974944;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phase<sp/>=<sp/>-2*pi*i<sp/>/<sp/>nfft;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(st-&gt;inverse)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phase<sp/>*=<sp/>-1;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kf_cexp(st-&gt;twiddles+i,<sp/>phase<sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kf_factor(nfft,st-&gt;factors);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>st;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kiss_fft_stride(<ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>st,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fin,<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fout,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_stride)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fin<sp/>==<sp/>fout)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//NOTE:<sp/>this<sp/>is<sp/>not<sp/>really<sp/>an<sp/>in-place<sp/>FFT<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//It<sp/>just<sp/>performs<sp/>an<sp/>out-of-place<sp/>FFT<sp/>into<sp/>a<sp/>temp<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*<sp/>tmpbuf<sp/>=<sp/>(<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>*)KISS_FFT_TMP_ALLOC(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>)*st-&gt;nfft);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kf_work(tmpbuf,fin,1,in_stride,<sp/>st-&gt;factors,st);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(fout,tmpbuf,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>)*st-&gt;nfft);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KISS_FFT_TMP_FREE(tmpbuf);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kf_work(<sp/>fout,<sp/>fin,<sp/>1,in_stride,<sp/>st-&gt;factors,st<sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kiss_fft(<ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref><sp/>cfg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fin,<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fout)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>kiss_fft_stride(cfg,fin,fout,1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kiss_fft_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>needed<sp/>any<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kiss_fft_next_fast_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=n;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(m%2)<sp/>==<sp/>0<sp/>)<sp/>m/=2;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(m%3)<sp/>==<sp/>0<sp/>)<sp/>m/=3;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(m%5)<sp/>==<sp/>0<sp/>)<sp/>m/=5;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m&lt;=1)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*<sp/>n<sp/>is<sp/>completely<sp/>factorable<sp/>by<sp/>twos,<sp/>threes,<sp/>and<sp/>fives<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h"/>
  </compounddef>
</doxygen>
