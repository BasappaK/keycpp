<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="classkeycpp_1_1matrix" kind="class" prot="public">
    <compoundname>keycpp::matrix</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classkeycpp_1_1matrix_1a3f320a21b7c5af7fe8660724e5f713bd" prot="public" static="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">keycpp::vector_k</ref>&lt; T &gt;::<ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">iterator</ref></type>
        <definition>typedef keycpp::vector_k&lt;T&gt;::iterator keycpp::matrix&lt; T, dim &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="45" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkeycpp_1_1matrix_1a6880872af4caf59eab4ccae9122ffd58" prot="public" static="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">keycpp::vector_k</ref>&lt; T &gt;::<ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">const_iterator</ref></type>
        <definition>typedef keycpp::vector_k&lt;T&gt;::const_iterator keycpp::matrix&lt; T, dim &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="46" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1ab9f011ec2b99ecddf781a89cf780a060" prot="public" static="no" mutable="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt;T&gt; keycpp::matrix&lt; T, dim &gt;::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="90" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1afcebe6fce26a54bce1a2ae376501c77e" prot="public" static="no" mutable="no">
        <type>std::array&lt; size_t, dim &gt;</type>
        <definition>std::array&lt;size_t,dim&gt; keycpp::matrix&lt; T, dim &gt;::mSize</definition>
        <argsstring></argsstring>
        <name>mSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="91" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a98602d4587a810ab2455b3d1b29456d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="48" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a08e0f5af92405fae766008d86bd4d9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(bool, vector_k&lt; T &gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="49" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0f64310d4a9f4af4a0e8bce2d4f826ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const size_t &amp;d1,...)</argsstring>
        <name>matrix</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="50" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="130" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aec6b86d059d88ae9c02dcc8309c09d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const vector_k&lt; vector_k&lt; T &gt;&gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a3b8bc665d15dd7e20fc6a72c8c995232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="52" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="182" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1acf5cdf8a8d5396420b87a188483a6cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;lst)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a23a9ee6ced1a3797a8fd974a7d3b0803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;lst)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="54" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="222" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab7d6c3bda37ffcfb007105fb150dedd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j, const size_t &amp;k,...)</argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="55" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="239" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a64eab0f7e909d7858679338a52530ba9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j, const size_t &amp;k,...) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="56" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="285" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab3ac80a8839ee1367ed5d6dc2a4f10a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j)</argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="57" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="331" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a09dd98285ca087613b94dceaf2cdd04d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="58" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="342" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1af19189228f639be9356bf782d546cfbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i)</argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="59" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="353" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ae20c2af1bdff8d29a66a96736794d0ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="60" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="364" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a7b1ad6983d1e6775d40ee1f6f1a7c96e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T, dim &gt;::operator*</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;x) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="61" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="375" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a90597c8d2c329df1af5b19b6c3ff2090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::matrix&lt; T, dim &gt;::operator*</definition>
        <argsstring>(const matrix&lt; T, dim-1 &gt; &amp;x) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim-1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="62" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="403" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aa9f050a30d89a2227deec4104dbc199a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::matrix&lt; T, dim &gt;::operator*</definition>
        <argsstring>(const matrix&lt; T, dim+1 &gt; &amp;x) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim+1 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="63" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="430" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a236aef5e4713073df5b56000711028e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::matrix&lt; T, dim &gt;::operator*</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="64" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="517" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ada7a8a25fb314072a6bc59ed7bda8867" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::matrix&lt; T, dim &gt;::operator+</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="65" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="610" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a2eebddb2db3156a8d05fe0baf9fc396e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
        <definition>matrix&lt; T, dim &gt; &amp; keycpp::matrix&lt; T, dim &gt;::operator+=</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="66" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="642" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8656b3861c657c6425c226ed8581a2da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::matrix&lt; T, dim &gt;::operator-</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="67" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="673" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aa4e52087fbf70c471a215981e84682cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt; keycpp::matrix&lt; T, dim &gt;::operator-</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;B) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="69" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="706" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aeff29be0826cee275df82ce9e109873f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::operator!=</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="70" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="738" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a81a97884f2b968ecc48a44c057a4d018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::operator==</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="71" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="762" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0e46bd1a6676c8f43e18c4090db04f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
        <definition>matrix&lt; T, dim &gt; &amp; keycpp::matrix&lt; T, dim &gt;::operator=</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="72" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="786" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aae976395cf7fa4eea95deb475e3fe085" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t keycpp::matrix&lt; T, dim &gt;::size</definition>
        <argsstring>(const size_t &amp;n) const </argsstring>
        <name>size</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="73" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="801" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad0abc30bb7fc8a2bd0e8998b954a4e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::resize</definition>
        <argsstring>(const std::array&lt; size_t, dim &gt; &amp;pSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const std::array&lt; size_t, dim &gt; &amp;</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="74" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="811" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a709d798964d53f5ab5436bace3f8789c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::resize</definition>
        <argsstring>(const matrix&lt; size_t, 1 &gt; &amp;pSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; size_t, 1 &gt; &amp;</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="75" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="870" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1acde130c9f5c7b0c77372e8041189bf85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::resize</definition>
        <argsstring>(const size_t &amp;pSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="76" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="934" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a01ba974989150e9bb0687af01a152b50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="77" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="943" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a24292e6d6ff6c30446fdb6976e63135e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">iterator</ref></type>
        <definition>iterator keycpp::matrix&lt; T, dim &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="78" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a4c48ca34a6f0292f9a39264e2d6148a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">iterator</ref></type>
        <definition>iterator keycpp::matrix&lt; T, dim &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="79" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a4f372a4850a0151cf7ce69800cafc196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator keycpp::matrix&lt; T, dim &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="80" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a4b05ed2716ac414b02e82f489d3db11a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator keycpp::matrix&lt; T, dim &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="81" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a7b0a3b0f85a9a2b2d9805a0c62ea7ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 1 &gt;</type>
        <definition>matrix&lt; T, 1 &gt; keycpp::matrix&lt; T, dim &gt;::row</definition>
        <argsstring>(const size_t &amp;i)</argsstring>
        <name>row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="82" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="957" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a9d3f4657a085099c9348f18a9a9a2bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 1 &gt;</type>
        <definition>matrix&lt; T, 1 &gt; keycpp::matrix&lt; T, dim &gt;::row</definition>
        <argsstring>(const size_t &amp;i) const </argsstring>
        <name>row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="83" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1038" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1af3976323ba896d2032e9d56faea5580b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 1 &gt;</type>
        <definition>matrix&lt; T, 1 &gt; keycpp::matrix&lt; T, dim &gt;::col</definition>
        <argsstring>(const size_t &amp;j) const </argsstring>
        <name>col</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="84" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1078" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aac7e808302a0316596e88528ce18300b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 1 &gt;</type>
        <definition>matrix&lt; T, 1 &gt; keycpp::matrix&lt; T, dim &gt;::col</definition>
        <argsstring>(const size_t &amp;j)</argsstring>
        <name>col</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="85" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1019" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aed824ccff1fa8367ebf759704e063e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::reserve</definition>
        <argsstring>(const size_t &amp;N)</argsstring>
        <name>reserve</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="89" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1100" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aae00b6698c9910ac76c1467877b66b07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::operator vector_k&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>operator vector_k&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="93" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="93" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab6983d6eee299ccb2998c58bd0e027c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; double &gt;</type>
        <definition>vector_k&lt; double &gt; keycpp::matrix&lt; double, 2 &gt;::operator*</definition>
        <argsstring>(const vector_k&lt; double &gt; &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="457" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="457" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ac785e98c5cd30b6070e1532236dbc26e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>vector_k&lt; std::complex&lt; double &gt; &gt; keycpp::matrix&lt; std::complex&lt; double &gt;, 2 &gt;::operator*</definition>
        <argsstring>(const vector_k&lt; std::complex&lt; double &gt;&gt; &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="487" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="487" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a37ff7d47a6219cf17fb4ebde48f8c7b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt;</type>
        <definition>matrix&lt; double, 2 &gt; keycpp::matrix&lt; double, 2 &gt;::operator*</definition>
        <argsstring>(const matrix&lt; double, 2 &gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="548" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="548" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1af5588cdcb9eef1da2fe80623204c5199" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt;, 2 &gt; keycpp::matrix&lt; std::complex&lt; double &gt;, 2 &gt;::operator*</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="579" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="579" bodyend="607"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="43" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="42" bodyend="103"/>
    <listofallmembers>
      <member refid="classkeycpp_1_1matrix_1a24292e6d6ff6c30446fdb6976e63135e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>begin</name></member>
      <member refid="classkeycpp_1_1matrix_1a4f372a4850a0151cf7ce69800cafc196" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>begin</name></member>
      <member refid="classkeycpp_1_1matrix_1af3976323ba896d2032e9d56faea5580b" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>col</name></member>
      <member refid="classkeycpp_1_1matrix_1aac7e808302a0316596e88528ce18300b" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>col</name></member>
      <member refid="classkeycpp_1_1matrix_1a6880872af4caf59eab4ccae9122ffd58" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>const_iterator</name></member>
      <member refid="classkeycpp_1_1matrix_1a01ba974989150e9bb0687af01a152b50" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>empty</name></member>
      <member refid="classkeycpp_1_1matrix_1a4c48ca34a6f0292f9a39264e2d6148a4" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>end</name></member>
      <member refid="classkeycpp_1_1matrix_1a4b05ed2716ac414b02e82f489d3db11a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>end</name></member>
      <member refid="classkeycpp_1_1matrix_1a3f320a21b7c5af7fe8660724e5f713bd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>iterator</name></member>
      <member refid="classkeycpp_1_1matrix_1a98602d4587a810ab2455b3d1b29456d6" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a08e0f5af92405fae766008d86bd4d9f6" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a0f64310d4a9f4af4a0e8bce2d4f826ae" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1aec6b86d059d88ae9c02dcc8309c09d97" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a3b8bc665d15dd7e20fc6a72c8c995232" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1acf5cdf8a8d5396420b87a188483a6cb3" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a23a9ee6ced1a3797a8fd974a7d3b0803" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1ab9f011ec2b99ecddf781a89cf780a060" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>mData</name></member>
      <member refid="classkeycpp_1_1matrix_1afcebe6fce26a54bce1a2ae376501c77e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>mSize</name></member>
      <member refid="classkeycpp_1_1matrix_1aae00b6698c9910ac76c1467877b66b07" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator vector_k&lt; T &gt;</name></member>
      <member refid="classkeycpp_1_1matrix_1aeff29be0826cee275df82ce9e109873f" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator!=</name></member>
      <member refid="classkeycpp_1_1matrix_1ab7d6c3bda37ffcfb007105fb150dedd1" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a64eab0f7e909d7858679338a52530ba9" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1ab3ac80a8839ee1367ed5d6dc2a4f10a1" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a09dd98285ca087613b94dceaf2cdd04d" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1af19189228f639be9356bf782d546cfbd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1ae20c2af1bdff8d29a66a96736794d0ce" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a7b1ad6983d1e6775d40ee1f6f1a7c96e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a90597c8d2c329df1af5b19b6c3ff2090" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1aa9f050a30d89a2227deec4104dbc199a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a236aef5e4713073df5b56000711028e2" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1ab6983d6eee299ccb2998c58bd0e027c9" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1ac785e98c5cd30b6070e1532236dbc26e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a37ff7d47a6219cf17fb4ebde48f8c7b2" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1af5588cdcb9eef1da2fe80623204c5199" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1ada7a8a25fb314072a6bc59ed7bda8867" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+</name></member>
      <member refid="classkeycpp_1_1matrix_1a2eebddb2db3156a8d05fe0baf9fc396e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+=</name></member>
      <member refid="classkeycpp_1_1matrix_1a8656b3861c657c6425c226ed8581a2da" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1matrix_1aa4e52087fbf70c471a215981e84682cd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1matrix_1a0e46bd1a6676c8f43e18c4090db04f06" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator=</name></member>
      <member refid="classkeycpp_1_1matrix_1a81a97884f2b968ecc48a44c057a4d018" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator==</name></member>
      <member refid="classkeycpp_1_1matrix_1aed824ccff1fa8367ebf759704e063e36" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>reserve</name></member>
      <member refid="classkeycpp_1_1matrix_1ad0abc30bb7fc8a2bd0e8998b954a4e65" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>resize</name></member>
      <member refid="classkeycpp_1_1matrix_1a709d798964d53f5ab5436bace3f8789c" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>resize</name></member>
      <member refid="classkeycpp_1_1matrix_1acde130c9f5c7b0c77372e8041189bf85" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>resize</name></member>
      <member refid="classkeycpp_1_1matrix_1a7b0a3b0f85a9a2b2d9805a0c62ea7ce9" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>row</name></member>
      <member refid="classkeycpp_1_1matrix_1a9d3f4657a085099c9348f18a9a9a2bfa" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>row</name></member>
      <member refid="classkeycpp_1_1matrix_1aae976395cf7fa4eea95deb475e3fe085" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
