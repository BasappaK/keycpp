<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="classkeycpp_1_1matrix" kind="class" prot="public">
    <compoundname>keycpp::matrix</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1a6ddee82f1659df325d1d67f17d261c19" prot="public" static="no" mutable="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt;T&gt; keycpp::matrix&lt; T &gt;::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="71" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1abe4763f5477a7d43a850ad340760b9bb" prot="private" static="no" mutable="no">
        <type>long unsigned int</type>
        <definition>long unsigned int keycpp::matrix&lt; T &gt;::mRows</definition>
        <argsstring></argsstring>
        <name>mRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="74" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1a5ee47ddd1b351ed29b7caa9c9f8f5a0d" prot="private" static="no" mutable="no">
        <type>long unsigned int</type>
        <definition>long unsigned int keycpp::matrix&lt; T &gt;::mCols</definition>
        <argsstring></argsstring>
        <name>mCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="75" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a67ccf4f864b38b69dfd8bdb507be243c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="50" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a5a24003e2c33f18b3f854bab4d68db7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const long unsigned int &amp;rows, const long unsigned int &amp;cols)</argsstring>
        <name>matrix</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="51" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0a591c69e753fe21b73031192d8b7209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const vector_k&lt; vector_k&lt; T &gt;&gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="52"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad8797411bc30cc0d42e0e9b8bcc899d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;lst)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="53"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a7ac2b9bb6b42468e63cce8bd527811fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T &gt;::operator()</definition>
        <argsstring>(const long unsigned int &amp;i, const long unsigned int &amp;j)</argsstring>
        <name>operator()</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="54" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="137" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8fd3fc1c1f75f80e37637bc10c3d8aa0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T &gt;::operator()</definition>
        <argsstring>(const long unsigned int &amp;i, const long unsigned int &amp;j) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="55" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="151" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a02963edbfa5435269e367e12fb2cdd59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T &gt;::operator*</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;x) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="56" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="165" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1add1f4ca03e1cce57574c905ab7ca89fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt; T &gt; keycpp::matrix&lt; T &gt;::operator*</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="57" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="252" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8c0520cf5064379afa5128cf7f660832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt; T &gt; keycpp::matrix&lt; T &gt;::operator+</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="58" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="344" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a78655e73267b48e16909a68291f4c074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
        <definition>matrix&lt; T &gt; &amp; keycpp::matrix&lt; T &gt;::operator+=</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="59" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="370" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a1c6cb00f8859e6486a7054f11b1c7e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt; T &gt; keycpp::matrix&lt; T &gt;::operator-</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="60" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="395" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a64df749d122ac1272738836329e76b24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long unsigned int</type>
        <definition>long unsigned int keycpp::matrix&lt; T &gt;::size</definition>
        <argsstring>(const long unsigned int &amp;n) const </argsstring>
        <name>size</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="61" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="421" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad522f701e86eafc344d8904d4f0a8f19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="62" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="438" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad8fe3c5d70837cf529f35c85196f3890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T &gt;::row</definition>
        <argsstring>(const long unsigned int &amp;i)</argsstring>
        <name>row</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="63" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="451" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a5fc527ff5096ff162580db9c9eb1637e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T &gt;::setLastRow</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;row)</argsstring>
        <name>setLastRow</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="64" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="467" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a5cbaeebb6b9c8d87656728c8f2183119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T &gt;::addLastRow</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;row)</argsstring>
        <name>addLastRow</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="65" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="485" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ae2a7a1a14ded018f2b3740ff3a8ca6a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T &gt;::getRow</definition>
        <argsstring>(const long unsigned int &amp;i) const </argsstring>
        <name>getRow</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="66" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="525" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aa37578e0da4d4f7531feed0627846a5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T &gt;::getLastRow</definition>
        <argsstring>() const </argsstring>
        <name>getLastRow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="67" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="546" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a3a24c261103af23606ca1505144869d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T &gt;::getCol</definition>
        <argsstring>(const long unsigned int &amp;j) const </argsstring>
        <name>getCol</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="68" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="563" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a1f70c345e600bae285d2ceb4ec616fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt; T &gt; keycpp::matrix&lt; T &gt;::col</definition>
        <argsstring>(const long unsigned int &amp;j)</argsstring>
        <name>col</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="69" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="509" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a453f9c8670ff98dda14dcc9b656a5958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T &gt;::reserve</definition>
        <argsstring>(const long unsigned int &amp;N)</argsstring>
        <name>reserve</name>
        <param>
          <type>const long unsigned int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="70" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a83c99c62f50eca6f4ddee84bc48ebdbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; double &gt;</type>
        <definition>vector_k&lt; double &gt; keycpp::matrix&lt; double &gt;::operator*</definition>
        <argsstring>(const vector_k&lt; double &gt; &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="193" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="192" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a472df909e5b8722de11df74046817db9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>vector_k&lt; std::complex&lt; double &gt; &gt; keycpp::matrix&lt; std::complex&lt; double &gt; &gt;::operator*</definition>
        <argsstring>(const vector_k&lt; std::complex&lt; double &gt;&gt; &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="223" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="222" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0e9fdbebdf1d95dd225a2bd1310cba30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt; double &gt; keycpp::matrix&lt; double &gt;::operator*</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="283" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="282" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0cbaef09170a16f74ed5acefa0f8ad3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt; &gt; keycpp::matrix&lt; std::complex&lt; double &gt; &gt;::operator*</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="314" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="313" bodyend="341"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="48" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="47" bodyend="76"/>
    <listofallmembers>
      <member refid="classkeycpp_1_1matrix_1a5cbaeebb6b9c8d87656728c8f2183119" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>addLastRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a1f70c345e600bae285d2ceb4ec616fc2" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>col</name></member>
      <member refid="classkeycpp_1_1matrix_1ad522f701e86eafc344d8904d4f0a8f19" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>empty</name></member>
      <member refid="classkeycpp_1_1matrix_1a3a24c261103af23606ca1505144869d5" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>getCol</name></member>
      <member refid="classkeycpp_1_1matrix_1aa37578e0da4d4f7531feed0627846a5a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>getLastRow</name></member>
      <member refid="classkeycpp_1_1matrix_1ae2a7a1a14ded018f2b3740ff3a8ca6a1" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>getRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a67ccf4f864b38b69dfd8bdb507be243c" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a5a24003e2c33f18b3f854bab4d68db7f" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a0a591c69e753fe21b73031192d8b7209" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1ad8797411bc30cc0d42e0e9b8bcc899d7" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a5ee47ddd1b351ed29b7caa9c9f8f5a0d" prot="private" virt="non-virtual"><scope>keycpp::matrix</scope><name>mCols</name></member>
      <member refid="classkeycpp_1_1matrix_1a6ddee82f1659df325d1d67f17d261c19" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>mData</name></member>
      <member refid="classkeycpp_1_1matrix_1abe4763f5477a7d43a850ad340760b9bb" prot="private" virt="non-virtual"><scope>keycpp::matrix</scope><name>mRows</name></member>
      <member refid="classkeycpp_1_1matrix_1a7ac2b9bb6b42468e63cce8bd527811fb" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a8fd3fc1c1f75f80e37637bc10c3d8aa0" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a02963edbfa5435269e367e12fb2cdd59" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1add1f4ca03e1cce57574c905ab7ca89fe" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a83c99c62f50eca6f4ddee84bc48ebdbc" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a472df909e5b8722de11df74046817db9" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a0e9fdbebdf1d95dd225a2bd1310cba30" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a0cbaef09170a16f74ed5acefa0f8ad3a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a8c0520cf5064379afa5128cf7f660832" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+</name></member>
      <member refid="classkeycpp_1_1matrix_1a78655e73267b48e16909a68291f4c074" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+=</name></member>
      <member refid="classkeycpp_1_1matrix_1a1c6cb00f8859e6486a7054f11b1c7e6a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1matrix_1a453f9c8670ff98dda14dcc9b656a5958" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>reserve</name></member>
      <member refid="classkeycpp_1_1matrix_1ad8fe3c5d70837cf529f35c85196f3890" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>row</name></member>
      <member refid="classkeycpp_1_1matrix_1a5fc527ff5096ff162580db9c9eb1637e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>setLastRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a64df749d122ac1272738836329e76b24" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
