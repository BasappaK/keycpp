<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="classkeycpp_1_1matrix" kind="class" prot="public">
    <compoundname>keycpp::matrix</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classkeycpp_1_1matrix_1a3f320a21b7c5af7fe8660724e5f713bd" prot="public" static="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">keycpp::vector_k</ref>&lt; T &gt;::<ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">iterator</ref></type>
        <definition>typedef keycpp::vector_k&lt;T&gt;::iterator keycpp::matrix&lt; T, dim &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="45" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkeycpp_1_1matrix_1a6880872af4caf59eab4ccae9122ffd58" prot="public" static="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">keycpp::vector_k</ref>&lt; T &gt;::<ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">const_iterator</ref></type>
        <definition>typedef keycpp::vector_k&lt;T&gt;::const_iterator keycpp::matrix&lt; T, dim &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="46" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1ab9f011ec2b99ecddf781a89cf780a060" prot="public" static="no" mutable="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt;T&gt; keycpp::matrix&lt; T, dim &gt;::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="93" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1afcebe6fce26a54bce1a2ae376501c77e" prot="public" static="no" mutable="no">
        <type>std::array&lt; size_t, dim &gt;</type>
        <definition>std::array&lt;size_t,dim&gt; keycpp::matrix&lt; T, dim &gt;::mSize</definition>
        <argsstring></argsstring>
        <name>mSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="94" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a98602d4587a810ab2455b3d1b29456d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="48" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="147" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aaff8deabd1aca849b288ffe9905c0183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>matrix</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="49" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="157" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a08e0f5af92405fae766008d86bd4d9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(bool, vector_k&lt; T &gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="50" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="172" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a1b6c5b038abdaa348e057426abb7fbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const size_t &amp;d1, const size_t &amp;d2=0,...)</argsstring>
        <name>matrix</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>d2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="51" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="187" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aec6b86d059d88ae9c02dcc8309c09d97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const vector_k&lt; vector_k&lt; T &gt;&gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a3b8bc665d15dd7e20fc6a72c8c995232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="53" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="250" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1acf5cdf8a8d5396420b87a188483a6cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;lst)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a23a9ee6ced1a3797a8fd974a7d3b0803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::matrix</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;lst)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="55" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="291" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab7d6c3bda37ffcfb007105fb150dedd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j, const size_t &amp;k,...)</argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="56" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="308" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a64eab0f7e909d7858679338a52530ba9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j, const size_t &amp;k,...) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>k</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="57" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="355" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab3ac80a8839ee1367ed5d6dc2a4f10a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j)</argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="58" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="402" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a09dd98285ca087613b94dceaf2cdd04d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i, const size_t &amp;j) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="59" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="414" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1af19189228f639be9356bf782d546cfbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i)</argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="60" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="426" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ae20c2af1bdff8d29a66a96736794d0ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T, dim &gt;::operator()</definition>
        <argsstring>(const size_t &amp;i) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="61" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="437" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a68bc6b14efbf17e118cdc50f6acaa34e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt; keycpp::matrix&lt; T, dim &gt;::operator*</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;B) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="66" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="591" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a6a3e220b41546c3c4b5e5845c7afe9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
        <definition>matrix&lt; T, dim &gt; &amp; keycpp::matrix&lt; T, dim &gt;::operator+=</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;B)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="70" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="715" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a93827ea9fce509328ecb21731b31aab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
        <definition>matrix&lt; T, dim &gt; &amp; keycpp::matrix&lt; T, dim &gt;::operator-=</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;B)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="72" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="742" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aa4e52087fbf70c471a215981e84682cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt; keycpp::matrix&lt; T, dim &gt;::operator-</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;B) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="74" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="769" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aeff29be0826cee275df82ce9e109873f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::operator!=</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="75" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="796" bodyend="817"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a81a97884f2b968ecc48a44c057a4d018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::operator==</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;B) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="76" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="820" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ac57cc429ad640030fb038c5e9075174a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
        <definition>matrix&lt; T, dim &gt; &amp; keycpp::matrix&lt; T, dim &gt;::operator=</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="78" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="845" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aae976395cf7fa4eea95deb475e3fe085" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t keycpp::matrix&lt; T, dim &gt;::size</definition>
        <argsstring>(const size_t &amp;n) const </argsstring>
        <name>size</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="79" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="860" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad0abc30bb7fc8a2bd0e8998b954a4e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::resize</definition>
        <argsstring>(const std::array&lt; size_t, dim &gt; &amp;pSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const std::array&lt; size_t, dim &gt; &amp;</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="80" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="870" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1af9b778743153486c7bd4ae4b30c35345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::resize</definition>
        <argsstring>(const matrix&lt; size_t, 2 &gt; &amp;pSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; size_t, 2 &gt; &amp;</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1acde130c9f5c7b0c77372e8041189bf85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::resize</definition>
        <argsstring>(const size_t &amp;pSize)</argsstring>
        <name>resize</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>pSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="82" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="993" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a01ba974989150e9bb0687af01a152b50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="83" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1017" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a24292e6d6ff6c30446fdb6976e63135e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">iterator</ref></type>
        <definition>iterator keycpp::matrix&lt; T, dim &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="84" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a4c48ca34a6f0292f9a39264e2d6148a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">iterator</ref></type>
        <definition>iterator keycpp::matrix&lt; T, dim &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="85" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a4f372a4850a0151cf7ce69800cafc196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator keycpp::matrix&lt; T, dim &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="86" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a4b05ed2716ac414b02e82f489d3db11a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator keycpp::matrix&lt; T, dim &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="87" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab932480004551a2bb08064b19d476cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt; T, 2 &gt; keycpp::matrix&lt; T, dim &gt;::row</definition>
        <argsstring>(const size_t &amp;i)</argsstring>
        <name>row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="88" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1031" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a74c5086c59092e4b5480ff6cceb87453" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt; T, 2 &gt; keycpp::matrix&lt; T, dim &gt;::row</definition>
        <argsstring>(const size_t &amp;i) const </argsstring>
        <name>row</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="89" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1068" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a16454ed1a63cec4ca273ab2ef218e68b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt; T, 2 &gt; keycpp::matrix&lt; T, dim &gt;::col</definition>
        <argsstring>(const size_t &amp;j) const </argsstring>
        <name>col</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="90" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1090" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a97af00468499faef7493168119ca88fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt; T, 2 &gt; keycpp::matrix&lt; T, dim &gt;::col</definition>
        <argsstring>(const size_t &amp;j)</argsstring>
        <name>col</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="91" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1049" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aed824ccff1fa8367ebf759704e063e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::matrix&lt; T, dim &gt;::reserve</definition>
        <argsstring>(const size_t &amp;N)</argsstring>
        <name>reserve</name>
        <param>
          <type>const size_t &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="92" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1112" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a3c5754fe0f3d99022ca5b9f302fdabaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t keycpp::matrix&lt; T, dim &gt;::length</definition>
        <argsstring>() const </argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="95" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8233b1486b19743833cd7b166406cadf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t keycpp::matrix&lt; T, dim &gt;::numel</definition>
        <argsstring>() const </argsstring>
        <name>numel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="99" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a01f007273ad64facaffdc0a8ab2b230a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T, dim &gt;::isVec</definition>
        <argsstring>() const </argsstring>
        <name>isVec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="104" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aae00b6698c9910ac76c1467877b66b07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::operator vector_k&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>operator vector_k&lt; T &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="120" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="120" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ada003509d697cc3d4a2d1a9ccba44a10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T, dim &gt;::operator T</definition>
        <argsstring>()</argsstring>
        <name>operator T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="135" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="135" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a37ff7d47a6219cf17fb4ebde48f8c7b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt;</type>
        <definition>matrix&lt; double, 2 &gt; keycpp::matrix&lt; double, 2 &gt;::operator*</definition>
        <argsstring>(const matrix&lt; double, 2 &gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="623" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="623" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1af5588cdcb9eef1da2fe80623204c5199" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt;, 2 &gt; keycpp::matrix&lt; std::complex&lt; double &gt;, 2 &gt;::operator*</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="655" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="655" bodyend="683"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="43" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="42" bodyend="144"/>
    <listofallmembers>
      <member refid="classkeycpp_1_1matrix_1a24292e6d6ff6c30446fdb6976e63135e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>begin</name></member>
      <member refid="classkeycpp_1_1matrix_1a4f372a4850a0151cf7ce69800cafc196" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>begin</name></member>
      <member refid="classkeycpp_1_1matrix_1a16454ed1a63cec4ca273ab2ef218e68b" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>col</name></member>
      <member refid="classkeycpp_1_1matrix_1a97af00468499faef7493168119ca88fa" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>col</name></member>
      <member refid="classkeycpp_1_1matrix_1a6880872af4caf59eab4ccae9122ffd58" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>const_iterator</name></member>
      <member refid="classkeycpp_1_1matrix_1a01ba974989150e9bb0687af01a152b50" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>empty</name></member>
      <member refid="classkeycpp_1_1matrix_1a4c48ca34a6f0292f9a39264e2d6148a4" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>end</name></member>
      <member refid="classkeycpp_1_1matrix_1a4b05ed2716ac414b02e82f489d3db11a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>end</name></member>
      <member refid="classkeycpp_1_1matrix_1a01f007273ad64facaffdc0a8ab2b230a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>isVec</name></member>
      <member refid="classkeycpp_1_1matrix_1a3f320a21b7c5af7fe8660724e5f713bd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>iterator</name></member>
      <member refid="classkeycpp_1_1matrix_1a3c5754fe0f3d99022ca5b9f302fdabaf" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>length</name></member>
      <member refid="classkeycpp_1_1matrix_1a98602d4587a810ab2455b3d1b29456d6" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1aaff8deabd1aca849b288ffe9905c0183" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a08e0f5af92405fae766008d86bd4d9f6" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a1b6c5b038abdaa348e057426abb7fbf5" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1aec6b86d059d88ae9c02dcc8309c09d97" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a3b8bc665d15dd7e20fc6a72c8c995232" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1acf5cdf8a8d5396420b87a188483a6cb3" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a23a9ee6ced1a3797a8fd974a7d3b0803" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1ab9f011ec2b99ecddf781a89cf780a060" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>mData</name></member>
      <member refid="classkeycpp_1_1matrix_1afcebe6fce26a54bce1a2ae376501c77e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>mSize</name></member>
      <member refid="classkeycpp_1_1matrix_1a8233b1486b19743833cd7b166406cadf" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>numel</name></member>
      <member refid="classkeycpp_1_1matrix_1ada003509d697cc3d4a2d1a9ccba44a10" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator T</name></member>
      <member refid="classkeycpp_1_1matrix_1aae00b6698c9910ac76c1467877b66b07" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator vector_k&lt; T &gt;</name></member>
      <member refid="classkeycpp_1_1matrix_1aeff29be0826cee275df82ce9e109873f" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator!=</name></member>
      <member refid="classkeycpp_1_1matrix_1ab7d6c3bda37ffcfb007105fb150dedd1" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a64eab0f7e909d7858679338a52530ba9" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1ab3ac80a8839ee1367ed5d6dc2a4f10a1" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a09dd98285ca087613b94dceaf2cdd04d" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1af19189228f639be9356bf782d546cfbd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1ae20c2af1bdff8d29a66a96736794d0ce" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a68bc6b14efbf17e118cdc50f6acaa34e" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a37ff7d47a6219cf17fb4ebde48f8c7b2" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1af5588cdcb9eef1da2fe80623204c5199" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a6a3e220b41546c3c4b5e5845c7afe9b7" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+=</name></member>
      <member refid="classkeycpp_1_1matrix_1aa4e52087fbf70c471a215981e84682cd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1matrix_1a93827ea9fce509328ecb21731b31aab3" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator-=</name></member>
      <member refid="classkeycpp_1_1matrix_1ac57cc429ad640030fb038c5e9075174a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator=</name></member>
      <member refid="classkeycpp_1_1matrix_1a81a97884f2b968ecc48a44c057a4d018" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator==</name></member>
      <member refid="classkeycpp_1_1matrix_1aed824ccff1fa8367ebf759704e063e36" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>reserve</name></member>
      <member refid="classkeycpp_1_1matrix_1ad0abc30bb7fc8a2bd0e8998b954a4e65" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>resize</name></member>
      <member refid="classkeycpp_1_1matrix_1af9b778743153486c7bd4ae4b30c35345" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>resize</name></member>
      <member refid="classkeycpp_1_1matrix_1acde130c9f5c7b0c77372e8041189bf85" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>resize</name></member>
      <member refid="classkeycpp_1_1matrix_1ab932480004551a2bb08064b19d476cae" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>row</name></member>
      <member refid="classkeycpp_1_1matrix_1a74c5086c59092e4b5480ff6cceb87453" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>row</name></member>
      <member refid="classkeycpp_1_1matrix_1aae976395cf7fa4eea95deb475e3fe085" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
