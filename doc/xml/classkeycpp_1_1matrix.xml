<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="classkeycpp_1_1matrix" kind="class" prot="public">
    <compoundname>keycpp::matrix</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1ae2144abe57757c5a29e73aaf4d3520aa" prot="public" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; keycpp::matrix&lt; T &gt;::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="101" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1a9915bff3d1054d011d0277e2f69d4cb9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int keycpp::matrix&lt; T &gt;::mRows</definition>
        <argsstring></argsstring>
        <name>mRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="104" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkeycpp_1_1matrix_1a0b3616ad94ec868233ef48c0b57c2d52" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int keycpp::matrix&lt; T &gt;::mCols</definition>
        <argsstring></argsstring>
        <name>mCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="105" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a67ccf4f864b38b69dfd8bdb507be243c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="80" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a7846ea93147dca75e5a8fbea7219c35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const int &amp;rows, const int &amp;cols)</argsstring>
        <name>matrix</name>
        <param>
          <type>const int &amp;</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="81" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="114" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad843813ecfec7c08b9259957406e94e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; T &gt;&gt; &amp;mat)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; T &gt;&gt; &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad8797411bc30cc0d42e0e9b8bcc899d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>keycpp::matrix&lt; T &gt;::matrix</definition>
        <argsstring>(const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;lst)</argsstring>
        <name>matrix</name>
        <param>
          <type>const std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="83"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a9613f3ed2de6b240b982df895f958c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; keycpp::matrix&lt; T &gt;::operator()</definition>
        <argsstring>(const int &amp;i, const int &amp;j)</argsstring>
        <name>operator()</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="84" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="166" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a2c51fa98ec9a48f18af144677c36ee98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T keycpp::matrix&lt; T &gt;::operator()</definition>
        <argsstring>(const int &amp;i, const int &amp;j) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="85" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="180" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8a60e529610d6ad6ae5f34b8cd5199bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; keycpp::matrix&lt; T &gt;::operator*</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;x) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="86" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="194" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1add1f4ca03e1cce57574c905ab7ca89fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt; T &gt; keycpp::matrix&lt; T &gt;::operator*</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B) const </argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="87" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="283" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8c0520cf5064379afa5128cf7f660832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt; T &gt; keycpp::matrix&lt; T &gt;::operator+</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="88" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="375" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a78655e73267b48e16909a68291f4c074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
        <definition>matrix&lt; T &gt; &amp; keycpp::matrix&lt; T &gt;::operator+=</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="89" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="401" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a1c6cb00f8859e6486a7054f11b1c7e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt; T &gt; keycpp::matrix&lt; T &gt;::operator-</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="90" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="426" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a32a13ebb69fb5f06dd8923d942d865b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycpp::matrix&lt; T &gt;::size</definition>
        <argsstring>(const int &amp;n) const </argsstring>
        <name>size</name>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="91" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="452" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ad522f701e86eafc344d8904d4f0a8f19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool keycpp::matrix&lt; T &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="92" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="469" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ab4711ffa4b634c69215f857561f1ed98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__ref" kindref="compound">vector_ref</ref>&lt; T &gt;</type>
        <definition>vector_ref&lt; T &gt; keycpp::matrix&lt; T &gt;::row</definition>
        <argsstring>(const int &amp;i)</argsstring>
        <name>row</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="93" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="482" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1ac7675f496771e688a1c059b58ac975cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycpp::matrix&lt; T &gt;::setLastRow</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;row)</argsstring>
        <name>setLastRow</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="94" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="498" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1aa6903fc828a5b42f7c1d9485832601aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycpp::matrix&lt; T &gt;::addLastRow</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;row)</argsstring>
        <name>addLastRow</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="95" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="517" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a14cad5ff7a9b3079754fc83b677208ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; keycpp::matrix&lt; T &gt;::getRow</definition>
        <argsstring>(const int &amp;i) const </argsstring>
        <name>getRow</name>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="96" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="550" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a20002e97217bcc6382e60694bf898e1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; keycpp::matrix&lt; T &gt;::getLastRow</definition>
        <argsstring>() const </argsstring>
        <name>getLastRow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="97" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="571" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a9c16ead5c2a61eb35c33328caa235b2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; keycpp::matrix&lt; T &gt;::getCol</definition>
        <argsstring>(const int &amp;j) const </argsstring>
        <name>getCol</name>
        <param>
          <type>const int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="98" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="588" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a09871aa61080cf8ff67ff792822797ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1vector__ref" kindref="compound">vector_ref</ref>&lt; T &gt;</type>
        <definition>vector_ref&lt; T &gt; keycpp::matrix&lt; T &gt;::col</definition>
        <argsstring>(const int &amp;j)</argsstring>
        <name>col</name>
        <param>
          <type>const int &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="99" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="534" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a719eb1cb62d0cd9168abe2235235f278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int keycpp::matrix&lt; T &gt;::reserve</definition>
        <argsstring>(const int &amp;N)</argsstring>
        <name>reserve</name>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="100" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="609" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a53aaf4f54bdbebf5664b67a440f73040" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; keycpp::matrix&lt; double &gt;::operator*</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="222" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="221" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a8a9131597beafc39a3d94b59af930756" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>std::vector&lt; std::complex&lt; double &gt; &gt; keycpp::matrix&lt; std::complex&lt; double &gt; &gt;::operator*</definition>
        <argsstring>(const std::vector&lt; std::complex&lt; double &gt;&gt; &amp;x) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const std::vector&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="253" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="252" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0e9fdbebdf1d95dd225a2bd1310cba30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt; double &gt; keycpp::matrix&lt; double &gt;::operator*</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="314" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="313" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1matrix_1a0cbaef09170a16f74ed5acefa0f8ad3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt; &gt; keycpp::matrix&lt; std::complex&lt; double &gt; &gt;::operator*</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;B) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="345" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="344" bodyend="372"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="78" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="77" bodyend="106"/>
    <listofallmembers>
      <member refid="classkeycpp_1_1matrix_1aa6903fc828a5b42f7c1d9485832601aa" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>addLastRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a09871aa61080cf8ff67ff792822797ac" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>col</name></member>
      <member refid="classkeycpp_1_1matrix_1ad522f701e86eafc344d8904d4f0a8f19" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>empty</name></member>
      <member refid="classkeycpp_1_1matrix_1a9c16ead5c2a61eb35c33328caa235b2f" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>getCol</name></member>
      <member refid="classkeycpp_1_1matrix_1a20002e97217bcc6382e60694bf898e1f" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>getLastRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a14cad5ff7a9b3079754fc83b677208ed" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>getRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a67ccf4f864b38b69dfd8bdb507be243c" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a7846ea93147dca75e5a8fbea7219c35d" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1ad843813ecfec7c08b9259957406e94e2" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1ad8797411bc30cc0d42e0e9b8bcc899d7" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>matrix</name></member>
      <member refid="classkeycpp_1_1matrix_1a0b3616ad94ec868233ef48c0b57c2d52" prot="private" virt="non-virtual"><scope>keycpp::matrix</scope><name>mCols</name></member>
      <member refid="classkeycpp_1_1matrix_1ae2144abe57757c5a29e73aaf4d3520aa" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>mData</name></member>
      <member refid="classkeycpp_1_1matrix_1a9915bff3d1054d011d0277e2f69d4cb9" prot="private" virt="non-virtual"><scope>keycpp::matrix</scope><name>mRows</name></member>
      <member refid="classkeycpp_1_1matrix_1a9613f3ed2de6b240b982df895f958c56" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a2c51fa98ec9a48f18af144677c36ee98" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator()</name></member>
      <member refid="classkeycpp_1_1matrix_1a8a60e529610d6ad6ae5f34b8cd5199bd" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1add1f4ca03e1cce57574c905ab7ca89fe" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a53aaf4f54bdbebf5664b67a440f73040" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a8a9131597beafc39a3d94b59af930756" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a0e9fdbebdf1d95dd225a2bd1310cba30" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a0cbaef09170a16f74ed5acefa0f8ad3a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1matrix_1a8c0520cf5064379afa5128cf7f660832" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+</name></member>
      <member refid="classkeycpp_1_1matrix_1a78655e73267b48e16909a68291f4c074" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator+=</name></member>
      <member refid="classkeycpp_1_1matrix_1a1c6cb00f8859e6486a7054f11b1c7e6a" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1matrix_1a719eb1cb62d0cd9168abe2235235f278" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>reserve</name></member>
      <member refid="classkeycpp_1_1matrix_1ab4711ffa4b634c69215f857561f1ed98" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>row</name></member>
      <member refid="classkeycpp_1_1matrix_1ac7675f496771e688a1c059b58ac975cb" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>setLastRow</name></member>
      <member refid="classkeycpp_1_1matrix_1a32a13ebb69fb5f06dd8923d942d865b4" prot="public" virt="non-virtual"><scope>keycpp::matrix</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
