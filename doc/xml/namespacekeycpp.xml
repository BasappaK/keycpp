<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="namespacekeycpp" kind="namespace">
    <compoundname>keycpp</compoundname>
    <innerclass refid="classkeycpp_1_1_figure_exception" prot="public">keycpp::FigureException</innerclass>
    <innerclass refid="classkeycpp_1_1_plots" prot="public">keycpp::Plots</innerclass>
    <innerclass refid="classkeycpp_1_1_figure" prot="public">keycpp::Figure</innerclass>
    <innerclass refid="classkeycpp_1_1_key_cpp_exception" prot="public">keycpp::KeyCppException</innerclass>
    <innerclass refid="structkeycpp_1_1observe" prot="public">keycpp::observe</innerclass>
    <innerclass refid="structkeycpp_1_1_o_d_e__type" prot="public">keycpp::ODE_type</innerclass>
    <innerclass refid="structkeycpp_1_1_sort___matrix" prot="public">keycpp::Sort_Matrix</innerclass>
    <innerclass refid="classkeycpp_1_1_s_v_d__type" prot="public">keycpp::SVD_type</innerclass>
    <innerclass refid="structkeycpp_1_1tictoc__type" prot="public">keycpp::tictoc_type</innerclass>
    <innerclass refid="structkeycpp_1_1meshgrid__type" prot="public">keycpp::meshgrid_type</innerclass>
    <innerclass refid="classkeycpp_1_1_matrix_exception" prot="public">keycpp::MatrixException</innerclass>
    <innerclass refid="classkeycpp_1_1span" prot="public">keycpp::span</innerclass>
    <innerclass refid="classkeycpp_1_1matrix_3_01_t_00_01dim_00_01_d_e_n_s_e___m_a_t_r_i_x_01_4" prot="public">keycpp::matrix&lt; T, dim, DENSE_MATRIX &gt;</innerclass>
    <innerclass refid="classkeycpp_1_1_sparse_matrix_exception" prot="public">keycpp::SparseMatrixException</innerclass>
    <innerclass refid="classkeycpp_1_1matrix_3_01_t_00_012_00_01_s_p_a_r_s_e___m_a_t_r_i_x_01_4" prot="public">keycpp::matrix&lt; T, 2, SPARSE_MATRIX &gt;</innerclass>
    <innerclass refid="classkeycpp_1_1_spline_exception" prot="public">keycpp::SplineException</innerclass>
    <innerclass refid="classkeycpp_1_1_extrap" prot="public">keycpp::Extrap</innerclass>
    <innerclass refid="classkeycpp_1_1_spline" prot="public">keycpp::Spline</innerclass>
    <innerclass refid="classkeycpp_1_1matrix" prot="public">keycpp::matrix</innerclass>
    <innerclass refid="classkeycpp_1_1_pointer_iterator" prot="public">keycpp::PointerIterator</innerclass>
    <innerclass refid="classkeycpp_1_1vector__k" prot="public">keycpp::vector_k</innerclass>
    <innernamespace refid="namespacekeycpp_1_1rng__ns">keycpp::rng_ns</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacekeycpp_1a8d3ada618b663c38fe93a45de99c4c50" prot="public" static="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double keycpp::pi</definition>
        <argsstring></argsstring>
        <name>pi</name>
        <initializer>= 3.1415926535897932384626433832795</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="42" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacekeycpp_1a685afaae59aa4c6da87f11c00699c5d8" prot="public" static="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double keycpp::eps</definition>
        <argsstring></argsstring>
        <name>eps</name>
        <initializer>= std::numeric_limits&lt;double&gt;::epsilon()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="43" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacekeycpp_1ac45d63b1cbd35b140f7d057d03b626df" prot="public" static="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double keycpp::Inf</definition>
        <argsstring></argsstring>
        <name>Inf</name>
        <initializer>= std::numeric_limits&lt;double&gt;::infinity()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="44" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacekeycpp_1a740d5b86942262cbcf119cd58a50f4fe" prot="public" static="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double keycpp::NaN</definition>
        <argsstring></argsstring>
        <name>NaN</name>
        <initializer>= std::numeric_limits&lt;double&gt;::quiet_NaN()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="45" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacekeycpp_1a6ab8937a6378526f7514c6124fb9991a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::real</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>real</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="34" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a026d42394a53ae81f292d1e3de4383cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt; T, dim &gt; keycpp::imag</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>imag</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="35" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4b8772b4517093ae5e6de3261ded005d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt; T, 2 &gt; keycpp::linspace</definition>
        <argsstring>(const T &amp;x1, const T &amp;x2, const size_t &amp;N)</argsstring>
        <name>linspace</name>
        <param>
          <type>const T &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="36" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1083" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af4a2245da139cf6cf2e03426476b3b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void keycpp::disp</definition>
        <argsstring>(const T &amp;x, std::ostream &amp;outStream=std::cout)</argsstring>
        <name>disp</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>outStream</declname>
          <defval>std::cout</defval>
        </param>
        <briefdescription>
<para>Displays on standard output any parameter passed to it provided the operator &lt;&lt; is defined for its type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="37" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1862" bodyend="1866"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0a3e909a47a04eeb46b990d774592140" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void keycpp::Figure::plot_vec&lt; std::complex&lt; double &gt; &gt;</definition>
        <argsstring>(matrix&lt; std::complex&lt; double &gt;, 2 &gt; y, std::string format, std::string property1, double val1)</argsstring>
        <name>Figure::plot_vec&lt; std::complex&lt; double &gt; &gt;</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>property1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="863" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Figure.h" bodystart="863" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a43b2f640a46183a8e275102a588ffeea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void keycpp::Figure::plot_vec&lt; std::complex&lt; double &gt; &gt;</definition>
        <argsstring>(matrix&lt; std::complex&lt; double &gt;, 2 &gt; y, std::string format, std::string property1, double val1, std::string property2, double val2)</argsstring>
        <name>Figure::plot_vec&lt; std::complex&lt; double &gt; &gt;</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>property1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>property2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="868" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Figure.h" bodystart="868" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1add1149c17f57b55ed5b5cedaea1cc069" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void keycpp::Figure::plot_vec&lt; std::complex&lt; double &gt; &gt;</definition>
        <argsstring>(matrix&lt; std::complex&lt; double &gt;, 2 &gt; y, std::string arguments, double val, double lw, double ps, std::string legend_entry)</argsstring>
        <name>Figure::plot_vec&lt; std::complex&lt; double &gt; &gt;</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>arguments</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lw</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ps</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>legend_entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="873" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Figure.h" bodystart="873" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a55e50932cc54f92bdd7e38c6438f4f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::ddot_</definition>
        <argsstring>(const int *N, const double *a, const int *inca, const double *b, const int *incb)</argsstring>
        <name>ddot_</name>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>inca</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incb</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s double dot product function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a2ce99b4fe4a13b9c70ada81761eb0ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zdotu_</definition>
        <argsstring>(std::complex&lt; double &gt; *result, const int *N, const std::complex&lt; double &gt; *a, const int *inca, const std::complex&lt; double &gt; *b, const int *incb)</argsstring>
        <name>zdotu_</name>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>inca</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incb</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s complex double dot product function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ae99c5b242a21ba683701ccb6ab6534b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::daxpy_</definition>
        <argsstring>(const int *N, const double *alpha, const double *x, const int *incx, double *y, const int *incy)</argsstring>
        <name>daxpy_</name>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s double vector addition function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a6460fa334239dde761d8f737b9438fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zaxpy_</definition>
        <argsstring>(const int *N, const std::complex&lt; double &gt; *alpha, const std::complex&lt; double &gt; *x, const int *incx, std::complex&lt; double &gt; *y, const int *incy)</argsstring>
        <name>zaxpy_</name>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incx</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incy</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s complex double vector addition function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7d249dd978770119c1b91d88009fefbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dscal_</definition>
        <argsstring>(const int *N, const double *alpha, double *x, const int *incx)</argsstring>
        <name>dscal_</name>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s double scalar-vector multiplication function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad9dd69d0d355e4805a832813199f1dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zscal_</definition>
        <argsstring>(const int *N, const std::complex&lt; double &gt; *alpha, std::complex&lt; double &gt; *x, const int *incx)</argsstring>
        <name>zscal_</name>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>incx</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s complex double scalar-vector multiplication function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ace2501951ab3db3a91c3520ae89750b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zggev_</definition>
        <argsstring>(const char *jobvl, const char *jobvr, const int *n, std::complex&lt; double &gt; *a, const int *lda, std::complex&lt; double &gt; *b, const int *ldb, std::complex&lt; double &gt; *alpha, std::complex&lt; double &gt; *beta, std::complex&lt; double &gt; *vl, const int *ldvl, std::complex&lt; double &gt; *vr, const int *ldvr, std::complex&lt; double &gt; *work, const int *lwork, double *rwork, int *info)</argsstring>
        <name>zggev_</name>
        <param>
          <type>const char *</type>
          <declname>jobvl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>jobvr</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>vl</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvl</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>vr</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvr</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex generalized eigenvalue solver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aebc5253e80ac15a9bfdc5449ae4f972a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgeev_</definition>
        <argsstring>(const char *jobvl, const char *jobvr, const int *n, double *A, const int *lda, double *wr, double *wi, double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info)</argsstring>
        <name>dgeev_</name>
        <param>
          <type>const char *</type>
          <declname>jobvl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>jobvr</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vl</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vr</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision eigenvalue solver for a general matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8c1cca2a162f40fc6c6218c35cadf9f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgeev_</definition>
        <argsstring>(const char *jobvl, const char *, const int *n, std::complex&lt; double &gt; *A, const int *lda, std::complex&lt; double &gt; *w, std::complex&lt; double &gt; *VL, const int *ldvl, std::complex&lt; double &gt; *VR, const int *ldvr, std::complex&lt; double &gt; *work, const int *lwork, double *rwork, int *info)</argsstring>
        <name>zgeev_</name>
        <param>
          <type>const char *</type>
          <declname>jobvl</declname>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>VL</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvl</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>VR</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvr</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex eigenvalue solver for a general matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aca3be6524e195662cbb74a810305e721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgecon_</definition>
        <argsstring>(const char *norm, const int *n, double *a, const int *lda, const double *anorm, double *rcond, double *work, int *iwork, int *info)</argsstring>
        <name>dgecon_</name>
        <param>
          <type>const char *</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>anorm</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rcond</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision reciprocal condition number estimator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a75e334ffaf1864d7191e9e0b64189783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgetrf_</definition>
        <argsstring>(const int *m, const int *n, double *a, const int *lda, int *lpiv, int *info)</argsstring>
        <name>dgetrf_</name>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lpiv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision LU decomposition function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab9c33788a2c083aa5738eda1fe62a261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgetrs_</definition>
        <argsstring>(const char *trans, int *n, int *nrhs, double *a, const int *lda, int *ipiv, double *b, int *ldb, int *info)</argsstring>
        <name>dgetrs_</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nrhs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipiv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision LU solver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4507ef954be960fec70ca0f93258d730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::dlange_</definition>
        <argsstring>(const char *norm, const int *m, const int *n, const double *a, const int *lda, double *work)</argsstring>
        <name>dlange_</name>
        <param>
          <type>const char *</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision norm function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a444e3cdc7e7929414370b6b50ea1218c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgecon_</definition>
        <argsstring>(const char *norm, const int *n, std::complex&lt; double &gt; *a, const int *lda, const double *anorm, double *rcond, std::complex&lt; double &gt; *work, double *rwork, int *info)</argsstring>
        <name>zgecon_</name>
        <param>
          <type>const char *</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>anorm</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rcond</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex-valued reciprocal condition number estimator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab18d58d53d8e19a37d74d24da27a64dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgetrf_</definition>
        <argsstring>(const int *m, const int *n, std::complex&lt; double &gt; *a, const int *lda, int *lpiv, int *info)</argsstring>
        <name>zgetrf_</name>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lpiv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex LU decomposition function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1abbe4322276dcdb7d864e85854b5b90f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgetrs_</definition>
        <argsstring>(const char *trans, int *n, int *nrhs, std::complex&lt; double &gt; *a, const int *lda, int *ipiv, std::complex&lt; double &gt; *b, int *ldb, int *info)</argsstring>
        <name>zgetrs_</name>
        <param>
          <type>const char *</type>
          <declname>trans</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nrhs</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipiv</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex LU solver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a1477c910b07baef984fe8528c29b2774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::zlange_</definition>
        <argsstring>(const char *norm, const int *m, const int *n, const std::complex&lt; double &gt; *a, const int *lda, double *work)</argsstring>
        <name>zlange_</name>
        <param>
          <type>const char *</type>
          <declname>norm</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex norm function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a12719f4b48de048f9642066666a920bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgesv_</definition>
        <argsstring>(const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, const int *info)</argsstring>
        <name>dgesv_</name>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>nrhs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipiv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision linear system solver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af92d0d887ae48cc4222f7167232a7f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgetri_</definition>
        <argsstring>(const int *n, double *A, const int *lda, const int *ipiv, double *work, const int *lwork, int *info)</argsstring>
        <name>dgetri_</name>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ipiv</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision matrix inverse function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4190e125fe33133aafa586089ca6e174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgetri_</definition>
        <argsstring>(const int *n, std::complex&lt; double &gt; *A, const int *lda, const int *ipiv, std::complex&lt; double &gt; *work, const int *lwork, int *info)</argsstring>
        <name>zgetri_</name>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ipiv</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex matrix inverse function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8fe7a71afbb6c5dc049cdd7afff6c0af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgesvd_</definition>
        <argsstring>(const char *jobu, const char *jobvt, const int *m, const int *n, double *A, const int *lda, double *S, double *U, const int *ldu, double *VT, const int *ldvt, double *work, const int *lwork, int *info)</argsstring>
        <name>dgesvd_</name>
        <param>
          <type>const char *</type>
          <declname>jobu</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>jobvt</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>VT</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s double precision SVD function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1afa5e2f74110f53bd288c15ce1f183f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgesvd_</definition>
        <argsstring>(const char *jobu, const char *jobvt, const int *m, const int *n, std::complex&lt; double &gt; *A, const int *lda, double *S, std::complex&lt; double &gt; *U, const int *ldu, std::complex&lt; double &gt; *VT, const int *ldvt, std::complex&lt; double &gt; *work, const int *lwork, double *rwork, int *info)</argsstring>
        <name>zgesvd_</name>
        <param>
          <type>const char *</type>
          <declname>jobu</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>jobvt</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>U</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>VT</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to LAPACK&apos;s complex SVD function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aef2cabbae720e89202edc998eb6cbfec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt; &gt; keycpp::eig</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt; &gt; &amp;B, matrix&lt; std::complex&lt; double &gt; &gt; *vr_return, matrix&lt; std::complex&lt; double &gt; &gt; *vl_return)</argsstring>
        <name>eig</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; *</type>
          <declname>vl_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Generalized complex-valued eigenvalue solver using LAPACK function call. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the eigenvalues(lambda) of the complex-valued generalized eigenvalue problem: Ax_r = lambda*Bx_r or x_l^T*A = lambda*x_l^T*B. The eigenvalues are returned by default. To return the right or left eigenvectors, supply the function with a std::complex&lt;double&gt; matrix object in the 3rd or 4th parameters, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="150" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2856" bodyend="2945"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ae8be23e99e5aab35207275afc0d43a57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt; &gt; keycpp::eig</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt; &gt; &amp;A, matrix&lt; std::complex&lt; double &gt; &gt; *vr_return, matrix&lt; std::complex&lt; double &gt; &gt; *vl_return)</argsstring>
        <name>eig</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; *</type>
          <declname>vl_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Complex-valued eigenvalue solver using LAPACK function call. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the eigenvalues(lambda) of the complex-valued eigenvalue problem: Ax_r = lambda*x_r or x_l^T*A = lambda*x_l^T. The eigenvalues are returned by default. To return the right or left eigenvectors, supply the function with a std::complex&lt;double&gt; matrix object in the 2nd or 3rd parameters, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="155" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2954" bodyend="3038"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0634c813880b20cecb300509be839a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; keycpp::eig</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A, matrix&lt; std::complex&lt; double &gt;&gt; *vr_return=NULL, matrix&lt; std::complex&lt; double &gt;&gt; *vl_return=NULL)</argsstring>
        <name>eig</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; *</type>
          <declname>vl_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3905cfc35dbd146f5dbf7bcb5729c2c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::rcond</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A)</argsstring>
        <name>rcond</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="163" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3061" bodyend="3106"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4d9a9dd04453e5a417f7a9eb8ae4391b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::rcond</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>rcond</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="164" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3108" bodyend="3155"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a689c189f68e2b22b98c1f484c4d965e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt; &gt; keycpp::linsolve</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A_in, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;b_in)</argsstring>
        <name>linsolve</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>b_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="165" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3157" bodyend="3236"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3246a259240624138144230f049e8dde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt; double &gt; keycpp::linsolve</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A_in, const matrix&lt; double &gt; &amp;b_in)</argsstring>
        <name>linsolve</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>b_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="167" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3238" bodyend="3316"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adc96927cda2df7a6e8e2031941c43601" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt; double &gt; keycpp::inv</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A_in)</argsstring>
        <name>inv</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="169" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3318" bodyend="3388"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9085342fc708fd5babae39321da3b89a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt; std::complex&lt; double &gt; &gt; keycpp::inv</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A_in)</argsstring>
        <name>inv</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="170" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3390" bodyend="3460"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3bffa5a846e181974d7bfe2ab41fe03a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; size_t, 2 &gt;</type>
        <definition>matrix&lt; size_t, 2 &gt; keycpp::size</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>size</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the size of matrix A. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the size of matrix A in a matrix_size_type variable.  auto msize = size(A); int num_rows = msize.rows; int num_cols = msize.cols; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">A</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix for which you want to know the size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matrix_size_type variable containing the number of rows and cols. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="172" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="555" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad91dbdf14632d313a304d3ddbadf935f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::isnan</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>isnan</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns boolean value that is true if a is NaN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="173" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2269" bodyend="2272"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad06706aa6f44dde4b12566f81ed2be94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::isnan</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;a)</argsstring>
        <name>isnan</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns boolean value that is true if a is NaN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="174" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2260" bodyend="2263"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7e322f9a9b9a2bd3446ecaffbcea88cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; bool, dim &gt;</type>
        <definition>matrix&lt; bool, dim &gt; keycpp::isnan</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>isnan</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns matrix containing boolean values that are true if corresponding elements of A are NaN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="175" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2278" bodyend="2287"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac999bd518fb456aa9a4fbd2c04f007de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::eop</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, T(*f)(const T &amp;))</argsstring>
        <name>eop</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>T(*)(const T &amp;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="178" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="178" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0865e2c884915d6ed0e3ef7bf73438b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::eop</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A, T(*f)(const std::complex&lt; T &gt; &amp;))</argsstring>
        <name>eop</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>T(*)(const std::complex&lt; T &gt; &amp;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="190" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a46e135aeca12d58b9a084413bf571783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::eop</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, T(*f)(T))</argsstring>
        <name>eop</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>T(*)(T)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="202" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a2309a6456fab18ec68a436f269d32d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::eop</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A, T(*f)(std::complex&lt; T &gt;))</argsstring>
        <name>eop</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>T(*)(std::complex&lt; T &gt;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="214" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="214" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a86f8946c126102b4467b70da16766b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; keycpp::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const vector_k&lt; T &gt; &amp;v1)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="252" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1add55ad2a40111d6368744a3d4144f25a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::prod</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;x)</argsstring>
        <name>prod</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the product of all the elements of the vector x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="264" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="264" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af5471fc9074471701bde9e68eb7971b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt;T&gt; keycpp::prod</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>prod</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns a vector containing the product of all the elements in each column of the matrix A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="282" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="282" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a52c37ec9c41349fd6bd862b8ebdd01bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt;</type>
        <definition>vector_k&lt;T&gt; keycpp::diff</definition>
        <argsstring>(const vector_k&lt; T &gt; &amp;v1)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Returns a vector of differences between adjacent elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="303" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="303" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1abb4e57814fd30b7b8d4845bbc16c73e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::diff</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns a matrix of row differences between adjacent rows. </para>        </briefdescription>
        <detaileddescription>
<para>TODO: Add recursive functionality and make sure it picks first non-singleton dimension. Also, accept dimension as argument. See MATLAB docs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="322" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="322" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a422c63d9cf20e676efbcefd445698aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::conj</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>conj</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="339" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aeaeb417b7e61b4bbe200edc1315c7d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::abs</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="354" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a6f7d77410749bcf5a36793e3754e357b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::abs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="359" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="359" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a952e5296774667c3be4e792b5cd980da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; keycpp::csqrt</definition>
        <argsstring>(const double &amp;a)</argsstring>
        <name>csqrt</name>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="364" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8faa7912f1f198c5185cb6a36cfd2fb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; keycpp::csqrt</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;a)</argsstring>
        <name>csqrt</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="369" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="369" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a18a3ebbda3c25527ae280f5c5725ff4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::sin</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the sine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="377" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aedb234b850e34f9331031d39084fdbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::sin</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the sine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="384" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a918a1ad9493c25e0afb4d2a37af24d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::cos</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the cosine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="392" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a882ae0fcbeee4b61db0483546cf76021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T, dim&gt; keycpp::cos</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the cos of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="399" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8e81f8ab9b05b8eaf07be99e141ce1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::tan</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the tangent of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="407" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3af9d4ca9aedc999153a2dd305a6e95e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::tan</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the tangent of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="414" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a74731028e7d006f90426aff4547c82e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::acos</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the arc cosine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="422" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aa4671e6b0c2be8f6411419d4615b2442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::acos</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the arc cosine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="429" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a024251803fe616d13f26978e2ebb10cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::asin</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the arc sine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="437" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af7cedb7bbe6ba4a4c6f87cff65c91298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::asin</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the arc sine of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="444" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0302faeef7172f537f3473216c0cf33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::exp</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the exponential of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="452" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a89087f62a5d5d136ad88493b920953ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::exp</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the exponential of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="459" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0d31321365987f3cadb5e6d3038d2ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::log</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the natural logarithm of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="467" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7a235af8108964defc4dc084bec2c7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::log</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the natural logarithm of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="474" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af5ee080f280e09a893944b33683e3d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::log10</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the base 10 logarithm of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="482" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3e6fb67c965ed61d53e3438a65282b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::log10</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>log10</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the base 10 logarithm of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="489" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a28a50cdc90b4c6f56bf9a7c144c4ac95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::sqrt</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the sqrt of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="497" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a1c9bd9044cff082d4bb16bf36903ca2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::sqrt</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the sqrt of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="504" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ae86dd983e0f6ac12811b765d7cb68f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt;</type>
        <definition>matrix&lt;std::complex&lt;T&gt;,dim&gt; keycpp::csqrt</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>csqrt</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the csqrt of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="512" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7ac11afedab6d33ab5c6bf7e7f7c7a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::csqrt</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>csqrt</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Return a vector containing the csqrt of each element of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="519" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8ae33fb19a521ab1ec1f22e7c39ca076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::eye</definition>
        <argsstring>(const int &amp;N)</argsstring>
        <name>eye</name>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="524" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="524" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a737223780bc4bcda96ca2142a2ac3de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int keycpp::size</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, const int &amp;n)</argsstring>
        <name>size</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Returns the number of elements along dimension dim. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements along dimension dim. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">A</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix for which you want to know the size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension along which you want the number of elements. 1 = number of rows, 2 = number of columns </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer value of the number of elements along the desired dimension. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="543" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a5699c522088657287bf0ac01173b716c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::zeros</definition>
        <argsstring>(const int &amp;M, const int &amp;N)</argsstring>
        <name>zeros</name>
        <param>
          <type>const int &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns a matrix of size M x N containing all zeros. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a matrix of size M x N containing all zeros. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An M x N matrix containing zeros for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="572" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="572" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3f2d2688097884d279a27fdbb38d35b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::zeros</definition>
        <argsstring>(const int &amp;N)</argsstring>
        <name>zeros</name>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns a matrix of size N x N containing all zeros. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a matrix of size N x N containing all zeros. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows and columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An N x N matrix containing zeros for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="584" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="584" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a388f91a0ccf34978ef9403ccd0c680bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::ones</definition>
        <argsstring>(const int &amp;M, const int &amp;N)</argsstring>
        <name>ones</name>
        <param>
          <type>const int &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns a matrix of size M x N containing all ones. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a matrix of size M x N containing all ones. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">M</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An M x N matrix containing ones for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="597" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="597" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a49b117efdb07f136f72534b65952c167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::ones</definition>
        <argsstring>(const int &amp;N)</argsstring>
        <name>ones</name>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns a matrix of size N x N containing all ones. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a matrix of size N x N containing all ones. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows and columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An N x N matrix containing ones for each element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="616" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="616" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4bb3ea9a842383b82c889179f25be9ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::diag</definition>
        <argsstring>(const std::initializer_list&lt; T &gt; &amp;lst, const int &amp;d=0)</argsstring>
        <name>diag</name>
        <param>
          <type>const std::initializer_list&lt; T &gt; &amp;</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>d</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="629" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="629" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1abb22f2e817f5a19a8547f446d48855b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::diag</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;A, const int &amp;d=0)</argsstring>
        <name>diag</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>d</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="659" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="659" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7dec07979cca186806a17250b2cb50aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::repmat</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;A, const int &amp;m, const int &amp;n)</argsstring>
        <name>repmat</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="736" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="736" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a23a0fd48168263aad7f77f1769dc2f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::times</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, const matrix&lt; U, dim &gt; &amp;B)</argsstring>
        <name>times</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Performs array multiplication on matrices A and B. </para>        </briefdescription>
        <detaileddescription>
<para>Each element of A is multiplied by each element of B. The matrix that is returned is the same size as A and B. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="760" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="760" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a6d379c0b2c9d430f498daae5601f7a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::rdivide</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, const matrix&lt; U, dim &gt; &amp;B)</argsstring>
        <name>rdivide</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>Performs right array division on matrices A and B. </para>        </briefdescription>
        <detaileddescription>
<para>Each element of A is divided by each element of B. The matrix that is returned is the same size as A and B. Equivalent to A./B in MATLAB. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="785" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="785" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac57d32902cba2c399475015235aeccec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;))&gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;))&gt; keycpp::ldivide</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;B, const matrix&lt; U &gt; &amp;A)</argsstring>
        <name>ldivide</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Performs left array division on matrices B and A. </para>        </briefdescription>
        <detaileddescription>
<para>Each element of A is divided by each element of B. The matrix that is returned is the same size as B and A. Equivalent to B. in MATLAB. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="809" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="809" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a87f2917e6a7c8e20d010aea0d8480668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int keycpp::sign</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>sign</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="830" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="830" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aaa2e17334911e8a447a5ef6c0cc54c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::angle</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;x)</argsstring>
        <name>angle</name>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="835" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1afbbe373666d686c14e6ce6517d050373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::angle</definition>
        <argsstring>(const matrix&lt; std::complex&lt; T &gt;, dim &gt; &amp;A)</argsstring>
        <name>angle</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; T &gt;, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="841" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="841" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a03b5a8f06ace0e74416f6b22fbefd1a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt; T, 2 &gt; keycpp::max</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;A)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="846" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="846" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adafc954673ba1f1fb140d83ba1d88a23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::max</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;A)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="888" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="888" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a96f9dd276a27f616258da602ee559541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::min</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;A)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="932" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="932" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aa29add9ed4a57360a11fbf614df7f3a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::min</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;A)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="974" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="974" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7fd5ce0385e9cc7bed5b44ed8475e8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::transpose</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the transpose of matrix A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1020" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1020" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a14503c0419f365433d88fa081d473210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::ctranspose</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>ctranspose</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the complex-conjugate transpose of matrix A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1035" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1035" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9fc1e2c9bf6ee79ee28a6f25b7b55b23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::ctranspose&lt; double &gt;</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A)</argsstring>
        <name>ctranspose&lt; double &gt;</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the complex-conjugate transpose of matrix A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1035" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1050" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a36cda317c047e8579e665abccf1b1398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::sum</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;A)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Computes the sum of each column of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1057" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1057" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a28626d0ffc4ecda3f9bc6e7b0f4fc4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::logspace</definition>
        <argsstring>(const T &amp;x1, const T &amp;x2, const int &amp;N)</argsstring>
        <name>logspace</name>
        <param>
          <type>const T &amp;</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Produces a vector containing N values logarithmically spaced between 10^(x1) and 10^(x2), inclusively. </para>        </briefdescription>
        <detaileddescription>
<para>Produces a vector containing N values logarithmically spaced between 10^(x1) and 10^(x2), inclusively. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x1</parametername>
</parameternamelist>
<parameterdescription>
<para>The base 10 logarithm of the minimum value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x2</parametername>
</parameternamelist>
<parameterdescription>
<para>The base 10 logarithm of the maximum value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">N</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of values between 10^(x1) and 10^(x2). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing N logarithmically spaced values between 10^(x1) and 10^(x2), inclusively. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1116" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1116" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aec240358cae3ca4a4a92c9e7dead409c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::unwrap</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;v1, const T &amp;tol=pi)</argsstring>
        <name>unwrap</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>tol</declname>
          <defval>pi</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1135" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1135" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a24ef7ec1e4c2fab43922859a44758da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::mean</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;v1)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Computes the mean of vector v1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1161" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1161" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9c5f11c2b7a3890a0987b9dd10e31cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::interp1_vec</definition>
        <argsstring>(const matrix&lt; U, 2 &gt; &amp;x, const matrix&lt; T, 2 &gt; &amp;y, const U &amp;x_interp, std::string method=&quot;linear&quot;, Extrap extrap=Extrap())</argsstring>
        <name>interp1_vec</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>x_interp</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;linear&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1_extrap" kindref="compound">Extrap</ref></type>
          <declname>extrap</declname>
          <defval><ref refid="classkeycpp_1_1_extrap" kindref="compound">Extrap</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1177" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1177" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab452328f21ddc3131c2df2b3cbbbed7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::interp1</definition>
        <argsstring>(const matrix&lt; U, 2 &gt; &amp;x, const matrix&lt; T, 2 &gt; &amp;y, const matrix&lt; U, 2 &gt; &amp;x_interp, std::string method=&quot;linear&quot;, Extrap extrap=Extrap())</argsstring>
        <name>interp1</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>x_interp</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;linear&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1_extrap" kindref="compound">Extrap</ref></type>
          <declname>extrap</declname>
          <defval><ref refid="classkeycpp_1_1_extrap" kindref="compound">Extrap</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1300" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1300" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aa379fd1b7ae981ede575baf357c18302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::interp1</definition>
        <argsstring>(const matrix&lt; U, 2 &gt; &amp;x, const matrix&lt; T, 2 &gt; &amp;y, const U &amp;x_interp, std::string method=&quot;linear&quot;, Extrap extrap=Extrap())</argsstring>
        <name>interp1</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>x_interp</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;linear&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1_extrap" kindref="compound">Extrap</ref></type>
          <declname>extrap</declname>
          <defval><ref refid="classkeycpp_1_1_extrap" kindref="compound">Extrap</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1374" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1374" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac9e68fc6f023bc2634c3a6f1ddb7e6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::trapz</definition>
        <argsstring>(const matrix&lt; U, 2 &gt; &amp;eta, const matrix&lt; T, 2 &gt; &amp;integrand)</argsstring>
        <name>trapz</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>integrand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1412" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1412" bodyend="1464"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adbb28bb59e9e552598c05ebe9d1af397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::diffxy</definition>
        <argsstring>(const matrix&lt; U, 2 &gt; &amp;eta, const matrix&lt; T, 2 &gt; &amp;u, const int &amp;index=2)</argsstring>
        <name>diffxy</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>eta</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>index</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1467" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1467" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a1fcfb748997291434fe9db7dbffd8c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::fft</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;u, int N=-1)</argsstring>
        <name>fft</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1546" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1546" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a6d7114f640a4a253a1d50ffc810bdad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="structkeycpp_1_1_o_d_e__type" kindref="compound">ODE_type</ref>&lt; U, T &gt;</type>
        <definition>ODE_type&lt;U,T&gt; keycpp::ode45</definition>
        <argsstring>(F odeClass, const std::initializer_list&lt; U &gt; &amp;x_span, matrix&lt; T, 2 &gt; ICs, double abs_tol=1.0e-10, double rel_tol=1.0e-6)</argsstring>
        <name>ode45</name>
        <param>
          <type>F</type>
          <declname>odeClass</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; U &gt; &amp;</type>
          <declname>x_span</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
          <declname>ICs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abs_tol</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rel_tol</declname>
          <defval>1.0e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1615" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1615" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aeea0edbbd76794e73bfade1d428f5dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::ode45</definition>
        <argsstring>(F odeClass, matrix&lt; U, 2 &gt; x_ode, matrix&lt; T, 2 &gt; ICs, double abs_tol=1.0e-10, double rel_tol=1.0e-6)</argsstring>
        <name>ode45</name>
        <param>
          <type>F</type>
          <declname>odeClass</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt;</type>
          <declname>x_ode</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
          <declname>ICs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abs_tol</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type>double</type>
          <declname>rel_tol</declname>
          <defval>1.0e-6</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1653" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1653" bodyend="1682"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1afcd6ae07fc18f5374868fe314f00108c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::set</definition>
        <argsstring>(Figure &amp;h, std::string property, double val)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="classkeycpp_1_1_figure" kindref="compound">Figure</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>property</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1684" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1684" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a53fd8f41e3cdddb0dcca913eef5ee329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::set</definition>
        <argsstring>(Figure &amp;h, std::string property, std::string val)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="classkeycpp_1_1_figure" kindref="compound">Figure</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>property</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1689" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1689" bodyend="1692"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ae67eb981ff22ef79a4ee90a9a40ae21f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::set</definition>
        <argsstring>(Figure &amp;h, std::string property, std::initializer_list&lt; size_t &gt; list)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="classkeycpp_1_1_figure" kindref="compound">Figure</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>property</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; size_t &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1694" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1694" bodyend="1697"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af9dec3da4533a1db21a6c6c4fe8e740a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::print</definition>
        <argsstring>(Figure &amp;h, std::string pterm, std::string pfilename)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classkeycpp_1_1_figure" kindref="compound">Figure</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>pterm</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>pfilename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1699" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1699" bodyend="1702"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a82fb697518c456560dea0b328e693418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structkeycpp_1_1_sort___matrix" kindref="compound">Sort_Matrix</ref>&lt; T &gt;</type>
        <definition>Sort_Matrix&lt; T &gt; keycpp::sort</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A, const size_t &amp;dim=2, std::string method=&quot;ascend&quot;)</argsstring>
        <name>sort</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;ascend&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1711" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1711" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aba69db64fe38ad271de1939d3f1a5520" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string keycpp::input</definition>
        <argsstring>(const std::string &amp;prompt, std::string option)</argsstring>
        <name>input</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prompt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Prints the prompt to the screen and then waits for user input. Currently the option must be supplied as &quot;s&quot; because C++ is a statically typed language. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1872" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1872" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4bca7924aad17a920f2f5f0606e6d9a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::str2num</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>str2num</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Converts a std::string to a double. Currently only works on single numbers. In the future this should be expanded to work on vectors and matrices. (see MATLAB docs) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1893" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1893" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9c30ad952d4422425a171c12bdf33947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t keycpp::length</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>length</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the length of the largest dimension of A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1901" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1901" bodyend="1904"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adcbcd3d38aa0721f2556422eb06cad7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t keycpp::numel</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>numel</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1907" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1907" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a1ff2731f68b07dddedc5d572a409ba9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; size_t, 2 &gt;</type>
        <definition>matrix&lt;size_t,2&gt; keycpp::find</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;v1, const size_t &amp;k=-1, std::string start=&quot;&quot;)</argsstring>
        <name>find</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>k</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>start</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Finds and returns the indices of non-zero elements of v1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1915" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1915" bodyend="1981"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8e6462a878df6e022bd4f9aa6f953983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::reshape</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A, const size_t &amp;m, const size_t &amp;n)</argsstring>
        <name>reshape</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="1984" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="1984" bodyend="2008"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a67c6ec70ba46d1d830acf7fbf8b8b97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;))&gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;))&gt; keycpp::dot</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A, const matrix&lt; U &gt; &amp;B, const size_t &amp;dim=-1)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Computes the dot product between the first non-singleton dimension of A and B. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2013" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2013" bodyend="2061"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a157ec9804a57367b3153fb3cc81f9224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;))&gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;))&gt; keycpp::cross</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;v1, const matrix&lt; U &gt; &amp;v2)</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Computes the cross product between vectors v1 and v2. Both vectors must have exactly 3 elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2067" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2067" bodyend="2087"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af6ba102c379ceaa8bfa814ecfa095a56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::norm</definition>
        <argsstring>(const matrix&lt; double, 2, 0 &gt; &amp;A_in, std::string method=&quot;2&quot;)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2, 0 &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;2&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2100" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3462" bodyend="3503"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a838fc93d66e1ab63d68d04781086d81a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_s_v_d__type" kindref="compound">SVD_type</ref>&lt; double, double &gt;</type>
        <definition>SVD_type&lt; double, double &gt; keycpp::svd</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A_in, std::string method)</argsstring>
        <name>svd</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Computes the singular value decomposition of matrix A_in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2101" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3507" bodyend="3648"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3d00bd96e42ccdc9faabc117b829f325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::norm</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2, 0 &gt; &amp;A_in, std::string method=&quot;2&quot;)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, 0 &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;2&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2102" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3650" bodyend="3691"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad610adca37ac4c85df23b899d29d5dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_s_v_d__type" kindref="compound">SVD_type</ref>&lt; std::complex&lt; double &gt;, double &gt;</type>
        <definition>SVD_type&lt; std::complex&lt; double &gt;, double &gt; keycpp::svd</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A_in, std::string method)</argsstring>
        <name>svd</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>method</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Computes the singular value decomposition of matrix A_in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2103" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3695" bodyend="3838"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aeb9efbc77cc58fa22403ea7ae5f4555c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int keycpp::rank</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>rank</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Estimates the rank of a matrix by counting the singular values whose absolute value is greater than epsilon. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2109" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2109" bodyend="2113"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8f497e2da901adba0e1257be943595a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::null</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>null</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Computes the nullspace of matrix A. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2118" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2118" bodyend="2142"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a70b89ab3e8f66f86c47c3bde004d4487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::any</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>any</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns true if a is nonzero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2147" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2147" bodyend="2154"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7c36622975d56232740753ada20b9f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::any</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>any</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns true if any elements of A are nonzero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2159" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2159" bodyend="2169"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aab77d82d9cc7d1fcca87967048f09e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::all</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>all</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns true if a is nonzero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2174" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2174" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a30bc3707493ba61f2165a189e7cbafd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::all</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>all</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns true if all elements of A are nonzero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2186" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2186" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac60465b61314a3baea857cf9d3579524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::finite</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>finite</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns boolean value that is true if a is finite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2202" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2202" bodyend="2214"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a047f1d1e201235ae75156016fc5b7edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; bool, dim &gt;</type>
        <definition>matrix&lt;bool,dim&gt; keycpp::finite</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>finite</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns matrix containing boolean values that are true if corresponding elements of A are finite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2220" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2220" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a852be6145adcca15ceaeb5a138651e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::isinf</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>isinf</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns boolean value that is true if a is infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2235" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2235" bodyend="2238"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a606c5ce0dc3b7ec19ec18f3bbc21d4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; bool, dim &gt;</type>
        <definition>matrix&lt;bool,dim&gt; keycpp::isinf</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>isinf</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns matrix containing boolean values that are true if corresponding elements of A are infinite. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2244" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2244" bodyend="2253"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1acc2de8926c54a2048a0d8965e7d70995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; bool &gt;</type>
        <definition>matrix&lt;bool&gt; keycpp::isempty</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>isempty</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns true if matrix is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2292" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2292" bodyend="2295"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a81a8c955cdbeb60181f6bf7d6553ac53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::isreal</definition>
        <argsstring>(const T &amp;a)</argsstring>
        <name>isreal</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Returns true if a is real. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2300" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2300" bodyend="2307"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af1342fad8b0d8f26c4acc9a65b7ec2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::isreal</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>isreal</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns true if all elements of A are real. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2312" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2312" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a005c1190f7087fb1d2545c38c080fd1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; keycpp::ceil</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;a)</argsstring>
        <name>ceil</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Rounds the real and imaginary parts of std::complex&lt;double&gt; a towards positive infinity seperately. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2327" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2327" bodyend="2332"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a6f75eb747c57c3e5ff91323f65a02b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::ceil</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>ceil</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Rounds the elements of A towards positive infinity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2337" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2337" bodyend="2340"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab30437496fbd2011521b31aee7961516" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::complex&lt; double &gt;</type>
        <definition>std::complex&lt;double&gt; keycpp::floor</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;a)</argsstring>
        <name>floor</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Rounds the real and imaginary parts of std::complex&lt;double&gt; a towards negative infinity seperately. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2345" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2345" bodyend="2350"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8aad0f0ac8036ee114a14da17aefcb5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::floor</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>floor</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Rounds the elements of A towards negative infinity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2355" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2355" bodyend="2358"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad5d215fa6882ff492cec0c3958fabadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;()*std::declval&lt; U &gt;())</type>
        <definition>decltype(std::declval&lt;T&gt;()*std::declval&lt;U&gt;()) keycpp::polyval</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;p, const U &amp;x)</argsstring>
        <name>polyval</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2361" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2361" bodyend="2371"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a11ba1fe24c04df74326c1289f82fe980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
        <definition>matrix&lt;T,2&gt; keycpp::roots</definition>
        <argsstring>(const matrix&lt; T, 2 &gt; &amp;p)</argsstring>
        <name>roots</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Computes all roots of polynomial p by solving for the eigenvalues of the companion matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2377" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2377" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a6069a9eec0edfa1d401230013d98765e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structkeycpp_1_1tictoc__type" kindref="compound">tictoc_type</ref></type>
        <definition>tictoc_type keycpp::tic</definition>
        <argsstring>()</argsstring>
        <name>tic</name>
        <briefdescription>
<para>Start the timer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2398" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2398" bodyend="2403"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1afe03fbbb5126729fb4b9367097acb1d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::toc</definition>
        <argsstring>(tictoc_type &amp;Timer)</argsstring>
        <name>toc</name>
        <param>
          <type><ref refid="structkeycpp_1_1tictoc__type" kindref="compound">tictoc_type</ref> &amp;</type>
          <declname>Timer</declname>
        </param>
        <briefdescription>
<para>Stop the timer. The number of elapsed seconds is returned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2407" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2407" bodyend="2412"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9d70a761d33bbc2bdec6b4e0eb43d517" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string keycpp::sprintf</definition>
        <argsstring>(const std::string &amp;fmt,...)</argsstring>
        <name>sprintf</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Overload of the C++ function <ref refid="namespacekeycpp_1a9d70a761d33bbc2bdec6b4e0eb43d517" kindref="member">sprintf()</ref>. This overload provides a more MATLAB-like interface. Specifically, the output is returned instead of passed by reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2417" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2417" bodyend="2447"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aa002278cc556c656aab5b157e81017b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; size_t, 2 &gt;</type>
        <definition>matrix&lt;size_t,2&gt; keycpp::clock</definition>
        <argsstring>()</argsstring>
        <name>clock</name>
        <briefdescription>
<para>Returns a vector of integers containing the current: year, month, day, hour, minute, and second. This is based on the system clock. The number of hours is based on the 24-hour clock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2453" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2453" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac20bd2ef4fb18cbcdb0f462a89447bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt;</type>
        <definition>matrix&lt;T&gt; keycpp::pinv</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;A)</argsstring>
        <name>pinv</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Returns the Moore-Penrose Pseudoinverse of matrix A. Currently only the SVD method is implemented. This restricts matrix A to be only square matrices. This is currently slower than inv(), use with care. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2472" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2472" bodyend="2494"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad70d9156c4b6a75e5b7a4c799f900162" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string keycpp::removeWhiteSpace</definition>
        <argsstring>(std::string in)</argsstring>
        <name>removeWhiteSpace</name>
        <param>
          <type>std::string</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2496" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2496" bodyend="2515"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac5c0a8bc58229a412ec2068979b6b84e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::importdata</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>importdata</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Returns a matrix containing the data read from a text file. Values must be white space separated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2518" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2518" bodyend="2568"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a126bda3ea87f21535d3a5da6587985dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; keycpp::importdata_complex</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>importdata_complex</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Returns a matrix containing the data read from a text file. Values must be white space separated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2571" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2571" bodyend="2621"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ada4b54cb009afd7217ea23f1778021c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::stdev</definition>
        <argsstring>(matrix&lt; T, 2 &gt; v1)</argsstring>
        <name>stdev</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Returns the standard deviation of inputed vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2625" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2625" bodyend="2640"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3742d74c104a006f442440544dbc22e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::stdev</definition>
        <argsstring>(matrix&lt; std::complex&lt; double &gt;, 2 &gt; v1)</argsstring>
        <name>stdev</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Returns the standard deviation of inputed vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2643" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2643" bodyend="2658"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8ce2d2a4c296ae28d1081f4345c3a947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::var</definition>
        <argsstring>(matrix&lt; T, 2 &gt; v1)</argsstring>
        <name>var</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2 &gt;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Returns the variance (square of standard deviation) for inputed vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2662" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2662" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac94ac14515f1da6cebf6f5d924bd1a35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::var</definition>
        <argsstring>(matrix&lt; std::complex&lt; double &gt;, 2 &gt; v1)</argsstring>
        <name>var</name>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
<para>Returns the variance (square of standard deviation) for inputed vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2668" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2668" bodyend="2671"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a93e133b94bc27c9b984d0383b01772d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::rng</definition>
        <argsstring>(size_t seed=0, std::string generator=&quot;twister&quot;)</argsstring>
        <name>rng</name>
        <param>
          <type>size_t</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>generator</declname>
          <defval>&quot;twister&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2696" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2696" bodyend="2709"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af2478c69f713d8664b53d31f25718530" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::rng</definition>
        <argsstring>(std::string shuffle=&quot;&quot;, std::string generator=&quot;&quot;)</argsstring>
        <name>rng</name>
        <param>
          <type>std::string</type>
          <declname>shuffle</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>generator</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2711" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2711" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a5ef5c1f5951e8182a7c4ec9612f3f7e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::rand</definition>
        <argsstring>()</argsstring>
        <name>rand</name>
        <briefdescription>
<para>Returns a random double between 0 and 1.0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2751" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2751" bodyend="2768"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab99a9561cf5654ae722a0879b41d9d73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::rand</definition>
        <argsstring>(const unsigned int &amp;N)</argsstring>
        <name>rand</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns an N x N matrix of random doubles between 0 and 1.0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2772" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2772" bodyend="2784"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af6413232f2de6f8ac96efde6531c3055" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::rand</definition>
        <argsstring>(const unsigned int &amp;M, const unsigned int &amp;N)</argsstring>
        <name>rand</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Returns an M x N matrix of random doubles between 0 and 1.0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2788" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2788" bodyend="2800"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1abbb4c27d8c550f3a522dcd4334986161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double keycpp::randn</definition>
        <argsstring>()</argsstring>
        <name>randn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2802" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2802" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab55434470472a4b6c511e5a713a4d654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::randn</definition>
        <argsstring>(const unsigned int &amp;N)</argsstring>
        <name>randn</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2821" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2821" bodyend="2833"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a43bbf0f2c5e3c68a4e03abcce5aa63da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::randn</definition>
        <argsstring>(const unsigned int &amp;M, const unsigned int &amp;N)</argsstring>
        <name>randn</name>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const unsigned int &amp;</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="2835" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="2835" bodyend="2847"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a11eb4ea6f5e22409e718cfd24de6c17a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; keycpp::eig</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A, matrix&lt; std::complex&lt; double &gt; &gt; *vr_return, matrix&lt; std::complex&lt; double &gt; &gt; *vl_return)</argsstring>
        <name>eig</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; *</type>
          <declname>vr_return</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt; *</type>
          <declname>vl_return</declname>
        </param>
        <briefdescription>
<para>Double precision eigenvalue solver using LAPACK function call. </para>        </briefdescription>
        <detaileddescription>
<para>This function returns the eigenvalues(lambda) of the eigenvalue problem: Ax_r = lambda*x_r or x_l^T*A = lambda*x_l^T. The eigenvalues are returned by default. To return the right or left eigenvectors, supply the function with a std::complex&lt;double&gt; matrix object in the 2nd or 3rd parameters, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="3048" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3048" bodyend="3059"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a5fa715d09dd31ec18be5cd455c216faa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; keycpp::lu</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A_in)</argsstring>
        <name>lu</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="3840" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3840" bodyend="3890"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac6e9ba154bce04912b775584590b4815" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::lu</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A_in)</argsstring>
        <name>lu</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="3892" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3892" bodyend="3942"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a870bd38d5e2dbf79da93073b9d2d5d9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt; &gt; keycpp::lu</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A_in, int *iw)</argsstring>
        <name>lu</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="3944" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3944" bodyend="3992"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac6ada4f2aa379b6d31cf0a4e1453f809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt;</type>
        <definition>matrix&lt;double&gt; keycpp::lu</definition>
        <argsstring>(const matrix&lt; double &gt; &amp;A_in, int *iw)</argsstring>
        <name>lu</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A_in</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="3994" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="3994" bodyend="4042"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a29c6eeb7d95bad691033adf85020becc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="structkeycpp_1_1meshgrid__type" kindref="compound">meshgrid_type</ref>&lt; T, U &gt;</type>
        <definition>meshgrid_type&lt;T,U&gt; keycpp::meshgrid</definition>
        <argsstring>(const matrix&lt; T &gt; &amp;x, const matrix&lt; U &gt; &amp;y)</argsstring>
        <name>meshgrid</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="4052" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="4052" bodyend="4078"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a16b58f47ed977cafdc96227468f5f10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgemm_</definition>
        <argsstring>(const char *TRANSA, const char *TRANSB, const int *M, const int *N, const int *K, double *ALPHA, const double *A, const int *LDA, const double *B, const int *LDB, double *BETA, double *C, const int *LDC)</argsstring>
        <name>dgemm_</name>
        <param>
          <type>const char *</type>
          <declname>TRANSA</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>TRANSB</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>K</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ALPHA</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDA</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDB</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>BETA</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDC</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s double matrix-matrix multiplication function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a29fb4e46ee1b9cce0fd8bc79a2490c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgemm_</definition>
        <argsstring>(const char *TRANSA, const char *TRANSB, const int *M, const int *N, const int *K, std::complex&lt; double &gt; *ALPHA, const std::complex&lt; double &gt; *A, const int *LDA, const std::complex&lt; double &gt; *B, const int *LDB, std::complex&lt; double &gt; *BETA, std::complex&lt; double &gt; *C, const int *LDC)</argsstring>
        <name>zgemm_</name>
        <param>
          <type>const char *</type>
          <declname>TRANSA</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>TRANSB</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>K</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>ALPHA</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDA</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>B</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDB</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>BETA</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>C</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDC</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s complex double matrix-matrix multiplication function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af0676a4a89dbb63f09fc627c05e12699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::dgemv_</definition>
        <argsstring>(const char *TRANS, const int *M, const int *N, const double *ALPHA, const double *A, const int *LDA, const double *X, const int *INCX, const double *BETA, double *Y, const int *INCY)</argsstring>
        <name>dgemv_</name>
        <param>
          <type>const char *</type>
          <declname>TRANS</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ALPHA</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDA</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>INCX</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>BETA</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>INCY</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s double matrix-vector multiplication function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aea174778653491b5fd21dd2960c0f7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zgemv_</definition>
        <argsstring>(const char *TRANS, const int *M, const int *N, const std::complex&lt; double &gt; *ALPHA, const std::complex&lt; double &gt; *A, const int *LDA, const std::complex&lt; double &gt; *X, const int *INCX, const std::complex&lt; double &gt; *BETA, std::complex&lt; double &gt; *Y, const int *INCY)</argsstring>
        <name>zgemv_</name>
        <param>
          <type>const char *</type>
          <declname>TRANS</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>ALPHA</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>LDA</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>INCX</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; *</type>
          <declname>BETA</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>INCY</declname>
        </param>
        <briefdescription>
<para>This provides a C interface to BLAS&apos;s complex double matrix-vector multiplication function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1acd7bbf24fe4142557beec72e40dd1975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; V &gt;)*std::declval&lt; U &gt;)), 2 &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;V&gt;)*std::declval&lt;U&gt;)),2&gt; keycpp::operator*</definition>
        <argsstring>(const matrix&lt; V, 2 &gt; &amp;A, const matrix&lt; U, 2 &gt; &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; V, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1284" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1284" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac5bd4a5eaf1cc853b600559127289823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt;</type>
        <definition>matrix&lt;double,2&gt; keycpp::operator*</definition>
        <argsstring>(const matrix&lt; double, 2 &gt; &amp;A, const matrix&lt; double, 2 &gt; &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; double, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1310" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1310" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0310594af20ccc687c25aef068f4cd6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::operator*</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1355" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1355" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adb8866924fddc4057262b0ab42615437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator+</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, const U &amp;a)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1398" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1398" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8ef9376f867b7683d5bf79a13f052f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator+</definition>
        <argsstring>(const U &amp;a, const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>operator+</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1409" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1409" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a1de1c62b34a2e4e23329683b4cb338f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator+</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;A, const matrix&lt; T, dim &gt; &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1421" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1421" bodyend="1441"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a11495b995d042f380b75ab2a5c339c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)-std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;) - std::declval&lt;U&gt;)),dim&gt; keycpp::operator-</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, const U &amp;a)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1443" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1443" bodyend="1452"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ab49d5c8906947568614956968251f5d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; U &gt;)-std::declval&lt; T &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;U&gt;) - std::declval&lt;T&gt;)),dim&gt; keycpp::operator-</definition>
        <argsstring>(const U &amp;a, const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>operator-</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1454" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1454" bodyend="1463"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0e7c18c3754a5fde2652aa67964adf19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; U &gt;)-std::declval&lt; T &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;U&gt;) - std::declval&lt;T&gt;)),dim&gt; keycpp::operator-</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;A, const matrix&lt; T, dim &gt; &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1466" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1466" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0fb730e3fdb0eb44a13913518ce0afc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator*</definition>
        <argsstring>(const T &amp;a, const matrix&lt; U, dim &gt; &amp;A)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1488" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1488" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a650b89b71e7516e560bb2be49b30aedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator*</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;A, const T &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1499" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1499" bodyend="1508"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac6b0a62473683f833921698fbf6f5ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::operator-</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1510" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1510" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aee7f8968a3e1ede6414762c44a8868af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt;</type>
        <definition>matrix&lt;T,dim&gt; keycpp::operator+</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1521" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1521" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a4bb5672c8d698032875766c42cd52547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator/</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A, const U &amp;a)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1532" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1532" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a88f5fa68e3f7fb39690f9e5c93bafc5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator/</definition>
        <argsstring>(const U &amp;a, const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>operator/</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1543" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1543" bodyend="1553"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adfc07ecaeccc3d1accc773feb559dabc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), dim &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),dim&gt; keycpp::operator/</definition>
        <argsstring>(const matrix&lt; U, dim &gt; &amp;A, const matrix&lt; T, dim &gt; &amp;B)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1555" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1555" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ae75fa09ce73880f22e79334a51e74adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::mat2num</definition>
        <argsstring>(const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>mat2num</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1588" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1588" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1abdc9a2ec3fa602bd1bad9cd9ea14038e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; keycpp::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const matrix&lt; T, dim &gt; &amp;A)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, dim &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/Matrix.h" line="1602" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/Matrix.h" bodystart="1602" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7f1888d553533d5f314c332e184ccaed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, SPARSE_MATRIX &gt;</type>
        <definition>matrix&lt;T,2,SPARSE_MATRIX&gt; keycpp::sparse</definition>
        <argsstring>(const matrix&lt; T, 2, 0 &gt; &amp;A)</argsstring>
        <name>sparse</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, 0 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="23" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="23" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7daba44de8578d8121d5607f9ba54a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int keycpp::compare</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="186" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="186" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a526025f6146831819b33713787a37638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), 2, 0 &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),2,0&gt; keycpp::operator*</definition>
        <argsstring>(const matrix&lt; T, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; U, 2, 0 &gt; &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2, 0 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="670" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="670" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9aafa7da7348137e3af28f89710e1ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; V &gt;)+std::declval&lt; U &gt;)), 2, SPARSE_MATRIX &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;V&gt;) + std::declval&lt;U&gt;)),2,SPARSE_MATRIX&gt; keycpp::operator+</definition>
        <argsstring>(const matrix&lt; V, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; U, 2, SPARSE_MATRIX &gt; &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; V, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="693" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="693" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1acf6b4d610217f949a10626f9b144276b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; V &gt;)+std::declval&lt; U &gt;)), 2, SPARSE_MATRIX &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;V&gt;) + std::declval&lt;U&gt;)),2,SPARSE_MATRIX&gt; keycpp::operator-</definition>
        <argsstring>(const matrix&lt; V, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; U, 2, SPARSE_MATRIX &gt; &amp;B)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; V, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="716" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="716" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3a287f66a7a810bf784f06817f38bb0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; V, 2, SPARSE_MATRIX &gt;</type>
        <definition>matrix&lt;V,2,SPARSE_MATRIX&gt; keycpp::transpose</definition>
        <argsstring>(const matrix&lt; V, 2, SPARSE_MATRIX &gt; &amp;A)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; V, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="738" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="738" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8d0c912ddcdb53cde9e68920b6181a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; decltype(std::declval&lt; T &gt;)*std::declval&lt; U &gt;)), 2, SPARSE_MATRIX &gt;</type>
        <definition>matrix&lt;decltype(std::declval&lt;T&gt;)*std::declval&lt;U&gt;)),2,SPARSE_MATRIX&gt; keycpp::operator*</definition>
        <argsstring>(const matrix&lt; T, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; U, 2, SPARSE_MATRIX &gt; &amp;B)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; U, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="755" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="755" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a8ce47094b7daecf247a8c2ca450192c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T keycpp::mat2num</definition>
        <argsstring>(const matrix&lt; T, 2, SPARSE_MATRIX &gt; &amp;A)</argsstring>
        <name>mat2num</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="781" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="781" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a69efc9ff27b63c2a4ce9e6a73fa3d019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; keycpp::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const matrix&lt; T, 2, SPARSE_MATRIX &gt; &amp;A)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="796" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="796" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a72e99f8ba51f0a533bb512cdd01be66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, 0 &gt;</type>
        <definition>matrix&lt;T,2,0&gt; keycpp::full</definition>
        <argsstring>(const matrix&lt; T, 2, SPARSE_MATRIX &gt; &amp;A)</argsstring>
        <name>full</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; T, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" line="812" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/SparseMatrix.h" bodystart="812" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adfb32fd99bb09455f5a124df4560ab0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::operator==</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="125" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="125" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9358d5f3f08dd8ed262697b7e8b2a4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::operator!=</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="129" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="129" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a689a724b505d52660e42e1148eba1a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::operator&lt;</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="133" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="133" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a7330eaaa701d2308c19f84adda097685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::operator&gt;</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="137" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="137" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9b02f40e92cad47b419ac09207518b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::operator&lt;=</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="141" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="141" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af6e928cddf953cbdd90b0cd6f3802b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool keycpp::operator&gt;=</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="145" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="145" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad88546738baf0a658bbe540827343939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt;::difference_type</type>
        <definition>PointerIterator&lt;T&gt;::difference_type keycpp::operator-</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="149" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a9f7b4d3036445526caa713d8c224a9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd_</definition>
        <argsstring>(int *ido, char *bmat, int *n, char *which, int *nev, double *tol, std::complex&lt; double &gt; *resid, int *ncv, std::complex&lt; double &gt; *v, int *ldv, int *iparam, int *ipntr, std::complex&lt; double &gt; *workd, std::complex&lt; double &gt; *workl, int *lworkl, double *rwork, int *info)</argsstring>
        <name>znaupd_</name>
        <param>
          <type>int *</type>
          <declname>ido</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncv</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iparam</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lworkl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="8" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af1b4572567168166e84ec6ed3eae0191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::zneupd_</definition>
        <argsstring>(int *rvec, char *All, int *select, std::complex&lt; double &gt; *d, std::complex&lt; double &gt; *v, int *ldv, std::complex&lt; double &gt; *sigma, std::complex&lt; double &gt; *workev, char *bmat, int *n, char *which, int *nev, double *tol, std::complex&lt; double &gt; *resid, int *ncv, std::complex&lt; double &gt; *, int *, int *iparam, int *ipntr, std::complex&lt; double &gt; *workd, std::complex&lt; double &gt; *workl, int *lworkl, double *rwork, int *ierr)</argsstring>
        <name>zneupd_</name>
        <param>
          <type>int *</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>All</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>select</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldv</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>workev</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>bmat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>which</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ncv</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
        </param>
        <param>
          <type>int *</type>
        </param>
        <param>
          <type>int *</type>
          <declname>iparam</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ipntr</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>workd</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>workl</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>lworkl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ierr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a5794468c104a7539534c626147ae057f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::mv</definition>
        <argsstring>(int n, std::complex&lt; double &gt; *in, std::complex&lt; double &gt; *out, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>mv</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="25" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="25" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a03c6774bc936a2d93af7ce9a32f25513" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::mv</definition>
        <argsstring>(int n, std::complex&lt; double &gt; *in, std::complex&lt; double &gt; *out, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;A)</argsstring>
        <name>mv</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="38" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1adbe452cbd5260ac6506b4e3183648ea5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::mv_special</definition>
        <argsstring>(int n, std::complex&lt; double &gt; *in, std::complex&lt; double &gt; *out, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Y, int *iw)</argsstring>
        <name>mv_special</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="54" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="54" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3d58a4fe9b658d14a5a10df3956eb51f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::mv_special</definition>
        <argsstring>(int n, std::complex&lt; double &gt; *in, std::complex&lt; double &gt; *out, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;A, Eigen::SparseLU&lt; Eigen::SparseMatrix&lt; std::complex&lt; double &gt;, Eigen::ColMajor &gt;, Eigen::COLAMDOrdering&lt; int &gt; &gt; &amp;solver)</argsstring>
        <name>mv_special</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>Eigen::SparseLU&lt; Eigen::SparseMatrix&lt; std::complex&lt; double &gt;, Eigen::ColMajor &gt;, Eigen::COLAMDOrdering&lt; int &gt; &gt; &amp;</type>
          <declname>solver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="81" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="81" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a42252cd439a48584ce227e75471f5532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>type</declname>
            <defname>type</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void keycpp::znaupd</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, std::string which, const matrix&lt; std::complex&lt; double &gt;, 2, type &gt; &amp;A)</argsstring>
        <name>znaupd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, type &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="101" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="101" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a44191deca39b1d9ec39037e6cb84bce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>type</declname>
            <defname>type</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void keycpp::znaupd</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evecs, std::string which, const matrix&lt; std::complex&lt; double &gt;, 2, type &gt; &amp;A)</argsstring>
        <name>znaupd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evecs</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, type &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="235" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="235" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1acf115de4d97d1f78157f3264ca253b08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::eigs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2, DENSE_MATRIX &gt; &amp;A, size_t k=6, std::string sigma=&quot;LM&quot;, matrix&lt; std::complex&lt; double &gt;, 2 &gt; *vr_return=NULL)</argsstring>
        <name>eigs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, DENSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>6</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>sigma</declname>
          <defval>&quot;LM&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="368" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="368" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aff34abc1339750817eab644908b5710f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::eigs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;A, size_t k=6, std::string sigma=&quot;LM&quot;, matrix&lt; std::complex&lt; double &gt;, 2 &gt; *vr_return=NULL)</argsstring>
        <name>eigs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>6</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>sigma</declname>
          <defval>&quot;LM&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="405" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="405" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a82061266615ad24ba5b25324aae1cc12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd_shift_invert</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, std::complex&lt; double &gt; sigma, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>znaupd_shift_invert</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="436" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="436" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ae57a4ddfa1c5ed22c8999a7cbb1daac2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd_shift_invert</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evecs, std::complex&lt; double &gt; sigma, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A)</argsstring>
        <name>znaupd_shift_invert</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evecs</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="617" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="617" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1aed068334768b69cdd07d81f766334dd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::eigs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;A, size_t k, std::complex&lt; double &gt; sigma, matrix&lt; std::complex&lt; double &gt;, 2 &gt; *vr_return=NULL)</argsstring>
        <name>eigs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="770" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="770" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a3a48586ae7aa9b525ec4c95eb2a3bf60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, std::string which, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;B)</argsstring>
        <name>znaupd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="807" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="807" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af636d0e1783e6db55988978301448baf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evecs, std::string which, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;B)</argsstring>
        <name>znaupd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evecs</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="945" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="945" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a0969cbc503faaa741d3482e8285ca976" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, std::string which, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;B)</argsstring>
        <name>znaupd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1083" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1083" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad462e40814478e9b094e72b83ddf0d88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evecs, std::string which, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;B)</argsstring>
        <name>znaupd</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evecs</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>which</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1224" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1224" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ac5afa37bc07eb8bb1fb04d44ba32d458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::eigs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;B, size_t k=6, std::string sigma=&quot;LM&quot;, matrix&lt; std::complex&lt; double &gt;, 2 &gt; *vr_return=NULL)</argsstring>
        <name>eigs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>6</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>sigma</declname>
          <defval>&quot;LM&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1365" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1365" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1a810da39d5f5a17a95f17fa2c3a27582e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::eigs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;B, size_t k=6, std::string sigma=&quot;LM&quot;, matrix&lt; std::complex&lt; double &gt;, 2 &gt; *vr_return=NULL)</argsstring>
        <name>eigs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2, SPARSE_MATRIX &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
          <defval>6</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>sigma</declname>
          <defval>&quot;LM&quot;</defval>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1406" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1406" bodyend="1438"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1ad5f126fb68111219bcb4183b9bb20310" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd_shift_invert</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, std::complex&lt; double &gt; sigma, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;B)</argsstring>
        <name>znaupd_shift_invert</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1440" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1440" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1acd3346eee20a40d90dd887267b4abb3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::znaupd_shift_invert</definition>
        <argsstring>(int n, int nev, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evals, matrix&lt; std::complex&lt; double &gt;&gt; &amp;Evecs, std::complex&lt; double &gt; sigma, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;&gt; &amp;B)</argsstring>
        <name>znaupd_shift_invert</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evals</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>Evecs</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1579" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1579" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="namespacekeycpp_1af0a6f7a9249e745a7420c9292e3bc374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt;</type>
        <definition>matrix&lt;std::complex&lt;double&gt;,2&gt; keycpp::eigs</definition>
        <argsstring>(const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;A, const matrix&lt; std::complex&lt; double &gt;, 2 &gt; &amp;B, size_t k, std::complex&lt; double &gt; sigma, matrix&lt; std::complex&lt; double &gt;, 2 &gt; *vr_return=NULL)</argsstring>
        <name>eigs</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1matrix" kindref="compound">matrix</ref>&lt; std::complex&lt; double &gt;, 2 &gt; *</type>
          <declname>vr_return</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/znaupd.h" line="1718" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/znaupd.h" bodystart="1718" bodyend="1757"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The keycpp namespace prevents KeyCpp functions and classes from interfering with other C++ libraries, for instance the std library. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/media/Storage/Research/open_source/keycpp/include/Figure.h" line="33" column="1"/>
  </compounddef>
</doxygen>
