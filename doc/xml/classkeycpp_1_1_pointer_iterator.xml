<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="classkeycpp_1_1_pointer_iterator" kind="class" prot="public">
    <compoundname>keycpp::PointerIterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::iterator&lt; std::random_access_iterator_tag, TypeT &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>TypeT</declname>
        <defname>TypeT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classkeycpp_1_1_pointer_iterator_1a1ef73c2e3452ec372b1bcc67e4d32fa6" prot="public" static="no">
        <type>std::random_access_iterator_tag</type>
        <definition>typedef std::random_access_iterator_tag keycpp::PointerIterator&lt; TypeT &gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="23" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkeycpp_1_1_pointer_iterator_1a5cd2295724a4697502177353b7d1f8cf" prot="public" static="no">
        <type>std::iterator&lt; std::random_access_iterator_tag, TypeT &gt;::value_type</type>
        <definition>typedef std::iterator&lt;std::random_access_iterator_tag, TypeT&gt;::value_type keycpp::PointerIterator&lt; TypeT &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="26" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkeycpp_1_1_pointer_iterator_1afe9aba481fceabc3ff98dfd05591e199" prot="public" static="no">
        <type>std::iterator&lt; std::random_access_iterator_tag, TypeT &gt;::difference_type</type>
        <definition>typedef std::iterator&lt;std::random_access_iterator_tag, TypeT&gt;::difference_type keycpp::PointerIterator&lt; TypeT &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="29" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkeycpp_1_1_pointer_iterator_1afb9ff3879d195f7361980a126756ebc0" prot="public" static="no">
        <type>std::iterator&lt; std::random_access_iterator_tag, TypeT &gt;::reference</type>
        <definition>typedef std::iterator&lt;std::random_access_iterator_tag, TypeT&gt;::reference keycpp::PointerIterator&lt; TypeT &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="32" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classkeycpp_1_1_pointer_iterator_1adada9309981bd33390b4b461c8f5b853" prot="public" static="no">
        <type>std::iterator&lt; std::random_access_iterator_tag, TypeT &gt;::pointer</type>
        <definition>typedef std::iterator&lt;std::random_access_iterator_tag, TypeT&gt;::pointer keycpp::PointerIterator&lt; TypeT &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="35" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classkeycpp_1_1_pointer_iterator_1ad513bffb30233c61f684a8e8e1d0ab53" prot="protected" static="no" mutable="no">
        <type>TypeT *</type>
        <definition>TypeT* keycpp::PointerIterator&lt; TypeT &gt;::m_pData</definition>
        <argsstring></argsstring>
        <name>m_pData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="19" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkeycpp_1_1_pointer_iterator_1ae2e20193e310cd9fc439a5ef7a949295" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t keycpp::PointerIterator&lt; TypeT &gt;::inc</definition>
        <argsstring></argsstring>
        <name>inc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="20" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a171cf2a71e4366b6062455814971ab75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>keycpp::PointerIterator&lt; TypeT &gt;::PointerIterator</definition>
        <argsstring>()</argsstring>
        <name>PointerIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="38" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a8144990606b147959521783cc7a7934f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>keycpp::PointerIterator&lt; TypeT &gt;::PointerIterator</definition>
        <argsstring>(const PointerIterator&lt; T2 &gt; &amp;r)</argsstring>
        <name>PointerIterator</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T2 &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="42" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1aa1a5f134d80ade0a24b6232f25d81a52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>keycpp::PointerIterator&lt; TypeT &gt;::PointerIterator</definition>
        <argsstring>(pointer pData, size_t pinc=1)</argsstring>
        <name>PointerIterator</name>
        <param>
          <type>pointer</type>
          <declname>pData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pinc</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="44" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1aac3906d9cdca051a792ef7899f78d47a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref> &amp;</type>
        <definition>PointerIterator&amp; keycpp::PointerIterator&lt; TypeT &gt;::operator=</definition>
        <argsstring>(const PointerIterator&lt; T2 &gt; &amp;r)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T2 &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="48" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1adb5f11092924ec2ffdb0987221ac09f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref> &amp;</type>
        <definition>PointerIterator&amp; keycpp::PointerIterator&lt; TypeT &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="51" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a8817b17c51afe87381ea2911386d2210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref> &amp;</type>
        <definition>PointerIterator&amp; keycpp::PointerIterator&lt; TypeT &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="54" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a84bfd964409dfdf89343cc9db3e996df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref></type>
        <definition>PointerIterator keycpp::PointerIterator&lt; TypeT &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="57" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1ac4da97a9c8c09ad6ee1d27f4eb27310f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref></type>
        <definition>PointerIterator keycpp::PointerIterator&lt; TypeT &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="60" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="59" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a93d3314a1e2896d39b87fce1c79cf3c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref></type>
        <definition>PointerIterator keycpp::PointerIterator&lt; TypeT &gt;::operator+</definition>
        <argsstring>(const difference_type &amp;n) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const difference_type &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="63" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a3cc779696b1e9b2c9aff80608ade1fce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref> &amp;</type>
        <definition>PointerIterator&amp; keycpp::PointerIterator&lt; TypeT &gt;::operator+=</definition>
        <argsstring>(const difference_type &amp;n)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const difference_type &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="66" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a30dbe9e2a35428de230bc91989ef36dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref></type>
        <definition>PointerIterator keycpp::PointerIterator&lt; TypeT &gt;::operator-</definition>
        <argsstring>(const difference_type &amp;n) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const difference_type &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="69" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="68" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a070e0ded5d9a1e27a81beef460e56dc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref> &amp;</type>
        <definition>PointerIterator&amp; keycpp::PointerIterator&lt; TypeT &gt;::operator-=</definition>
        <argsstring>(const difference_type &amp;n)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const difference_type &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="72" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a8f90f761a85a25dc17e6c4c1a3d395c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference keycpp::PointerIterator&lt; TypeT &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="75" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1ae43cd45245f9d970256e1b3f021f3d53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer keycpp::PointerIterator&lt; TypeT &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="78" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="77" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a390b37fc74ce6893512e8a02c4fea83d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference keycpp::PointerIterator&lt; TypeT &gt;::operator[]</definition>
        <argsstring>(const difference_type &amp;n) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const difference_type &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="81" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="80" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classkeycpp_1_1_pointer_iterator_1a52500cdd636c14af6f85196b1cae8a44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t keycpp::PointerIterator&lt; TypeT &gt;::get_inc</definition>
        <argsstring>() const </argsstring>
        <name>get_inc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="124" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="124" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1a06dfe074dcfe7a2ab9527586369dbcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="87" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="128" bodyend="129"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1a7682ba01e82b3aba962c6ee0c32d4d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="92" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="132" bodyend="133"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1af558be7c8449cd575bbf7b362d27b6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="97" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="136" bodyend="137"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1a29c4edb27dcc46bea93df78eef3eb1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="102" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="140" bodyend="141"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1afc6f64c3c35e55197f846b2328cb21f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="107" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="144" bodyend="145"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1a7a58bf216a9bd8b4a4cfd2905a421b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="112" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="148" bodyend="149"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1a8e7bea4d56f15979b01078c740fc9d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt;::difference_type</type>
        <definition>PointerIterator&lt;T&gt;::difference_type operator+</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="117" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="friend" id="classkeycpp_1_1_pointer_iterator_1a0c82b8711579ffa15e4ec6f8952e7bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt;::difference_type</type>
        <definition>PointerIterator&lt;T&gt;::difference_type operator-</definition>
        <argsstring>(const PointerIterator&lt; T &gt; &amp;r1, const PointerIterator&lt; T &gt; &amp;r2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classkeycpp_1_1_pointer_iterator" kindref="compound">PointerIterator</ref>&lt; T &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="122" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="158" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="50">
        <label>keycpp::PointerIterator&lt; TypeT &gt;</label>
        <link refid="classkeycpp_1_1_pointer_iterator"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>std::iterator&lt;std::random_access_iterator_tag, TypeT&gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="52">
        <label>keycpp::PointerIterator&lt; TypeT &gt;</label>
        <link refid="classkeycpp_1_1_pointer_iterator"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>std::iterator&lt;std::random_access_iterator_tag, TypeT&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/media/Storage/Research/open_source/keycpp/include/vector_k.h" line="17" bodyfile="/media/Storage/Research/open_source/keycpp/include/vector_k.h" bodystart="15" bodyend="125"/>
    <listofallmembers>
      <member refid="classkeycpp_1_1_pointer_iterator_1afe9aba481fceabc3ff98dfd05591e199" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>difference_type</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a52500cdd636c14af6f85196b1cae8a44" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>get_inc</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1ae2e20193e310cd9fc439a5ef7a949295" prot="protected" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>inc</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a1ef73c2e3452ec372b1bcc67e4d32fa6" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>iterator_category</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1ad513bffb30233c61f684a8e8e1d0ab53" prot="protected" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>m_pData</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a7682ba01e82b3aba962c6ee0c32d4d3d" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator!=</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a8f90f761a85a25dc17e6c4c1a3d395c9" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator*</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a93d3314a1e2896d39b87fce1c79cf3c0" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator+</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a8e7bea4d56f15979b01078c740fc9d33" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator+</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1adb5f11092924ec2ffdb0987221ac09f7" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator++</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a84bfd964409dfdf89343cc9db3e996df" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator++</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a3cc779696b1e9b2c9aff80608ade1fce" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator+=</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a30dbe9e2a35428de230bc91989ef36dd" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a0c82b8711579ffa15e4ec6f8952e7bda" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator-</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a8817b17c51afe87381ea2911386d2210" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator--</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1ac4da97a9c8c09ad6ee1d27f4eb27310f" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator--</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a070e0ded5d9a1e27a81beef460e56dc1" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator-=</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1ae43cd45245f9d970256e1b3f021f3d53" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator-&gt;</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1af558be7c8449cd575bbf7b362d27b6f9" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator&lt;</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1afc6f64c3c35e55197f846b2328cb21f8" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator&lt;=</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1aac3906d9cdca051a792ef7899f78d47a" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator=</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a06dfe074dcfe7a2ab9527586369dbcc3" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator==</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a29c4edb27dcc46bea93df78eef3eb1f7" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator&gt;</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a7a58bf216a9bd8b4a4cfd2905a421b8c" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator&gt;=</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a390b37fc74ce6893512e8a02c4fea83d" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>operator[]</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1adada9309981bd33390b4b461c8f5b853" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>pointer</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a171cf2a71e4366b6062455814971ab75" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>PointerIterator</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a8144990606b147959521783cc7a7934f" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>PointerIterator</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1aa1a5f134d80ade0a24b6232f25d81a52" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>PointerIterator</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1afb9ff3879d195f7361980a126756ebc0" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>reference</name></member>
      <member refid="classkeycpp_1_1_pointer_iterator_1a5cd2295724a4697502177353b7d1f8cf" prot="public" virt="non-virtual"><scope>keycpp::PointerIterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
