<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="kiss__fft_8h" kind="file">
    <compoundname>kiss_fft.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includedby refid="__kiss__fft__guts_8h" local="yes">_kiss_fft_guts.h</includedby>
    <incdepgraph>
      <node id="87">
        <label>stdlib.h</label>
      </node>
      <node id="90">
        <label>string.h</label>
      </node>
      <node id="89">
        <label>math.h</label>
      </node>
      <node id="86">
        <label>kiss_fft.h</label>
        <link refid="kiss_fft.h"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="93">
        <label>keycpp.h</label>
        <link refid="keycpp_8h"/>
      </node>
      <node id="91">
        <label>kiss_fft.h</label>
        <link refid="kiss_fft.h"/>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>_kiss_fft_guts.h</label>
        <link refid="__kiss__fft__guts_8h_source"/>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structkiss__fft__cpx" prot="public">kiss_fft_cpx</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="kiss__fft_8h_1aa6e24524bfa0247ac606c950e43a9a4d" prot="public" static="no">
        <name>KISS_FFT_MALLOC</name>
        <initializer>malloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="46" column="10" bodyfile="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kiss__fft_8h_1a167bff53d1f15bc13289353390b7faae" prot="public" static="no">
        <name>KISS_FFT_FREE</name>
        <initializer>free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="47" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kiss__fft_8h_1a4d9bf2d6a2ce1b061545a16faf77d337" prot="public" static="no">
        <name>kiss_fft_scalar</name>
        <initializer>float</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="61" column="12" bodyfile="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kiss__fft_8h_1a62e86236e852945b8e120d0228377d71" prot="public" static="no">
        <name>kiss_fft_free</name>
        <initializer>free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="116" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kiss__fft_8h_1ad5d759d8e80434375e61c6a7de9aee79" prot="public" static="no">
        <name>kiss_fftr_next_fast_size_real</name>
        <param><defname>n</defname></param>
        <initializer>(kiss_fft_next_fast_size( ((n)+1)&gt;&gt;1)&lt;&lt;1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="131" column="9" bodyfile="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="kiss__fft_8h_1ab8c364e12d4cbde47dca54eb4bc3ce79" prot="public" static="no">
        <type>struct <ref refid="structkiss__fft__state" kindref="compound">kiss_fft_state</ref> *</type>
        <definition>typedef struct kiss_fft_state* kiss_fft_cfg</definition>
        <argsstring></argsstring>
        <name>kiss_fft_cfg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="70" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="kiss__fft_8h_1ab5ad1560b58375ec071da45401911358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
        <definition>kiss_fft_cfg kiss_fft_alloc</definition>
        <argsstring>(int nfft, int inverse_fft, void *mem, size_t *lenmem)</argsstring>
        <name>kiss_fft_alloc</name>
        <param>
          <type>int</type>
          <declname>nfft</declname>
        </param>
        <param>
          <type>int</type>
          <declname>inverse_fft</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>lenmem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="95" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="488" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="kiss__fft_8h_1ab36e2bb33b74c1a7eabe3271d0916030" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kiss_fft</definition>
        <argsstring>(kiss_fft_cfg cfg, const kiss_fft_cpx *fin, kiss_fft_cpx *fout)</argsstring>
        <name>kiss_fft</name>
        <param>
          <type><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="107" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="534" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="kiss__fft_8h_1a240e0a77bb991890d609f498f9c75ec8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kiss_fft_stride</definition>
        <argsstring>(kiss_fft_cfg cfg, const kiss_fft_cpx *fin, kiss_fft_cpx *fout, int fin_stride)</argsstring>
        <name>kiss_fft_stride</name>
        <param>
          <type><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref></type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>const <ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref> *</type>
          <declname>fout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fin_stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="112" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="520" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="kiss__fft_8h_1aab7972365fc8f30a13eed91fa29172ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kiss_fft_cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>kiss_fft_cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="122" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="kiss__fft_8h_1a26b8ac31a43a356943061318831508e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int kiss_fft_next_fast_size</definition>
        <argsstring>(int n)</argsstring>
        <name>kiss_fft_next_fast_size</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h" line="128" column="1" bodyfile="/media/Storage/Research/open_source/keycpp/include/_kiss_fft_guts.h" bodystart="545" bodyend="557"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2003-2010,<sp/>Mark<sp/>Borgerding</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>author<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>any<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>KISS_FFT_H</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KISS_FFT_H</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>ATTENTION!</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>If<sp/>you<sp/>would<sp/>like<sp/>a<sp/>:</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>--<sp/>a<sp/>utility<sp/>that<sp/>will<sp/>handle<sp/>the<sp/>caching<sp/>of<sp/>fft<sp/>objects</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>--<sp/>real-only<sp/>(no<sp/>imaginary<sp/>time<sp/>component<sp/>)<sp/>FFT</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>--<sp/>a<sp/>multi-dimensional<sp/>FFT</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>--<sp/>a<sp/>command-line<sp/>utility<sp/>to<sp/>perform<sp/>ffts</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>--<sp/>a<sp/>command-line<sp/>utility<sp/>to<sp/>perform<sp/>fast-convolution<sp/>filtering</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>Then<sp/>see<sp/>kfc.h<sp/>kiss_fftr.h<sp/>kiss_fftnd.h<sp/>fftutil.c<sp/>kiss_fastfir.c</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>tools/<sp/>directory.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_SIMD</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;xmmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>kiss_fft_scalar<sp/>__m128</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KISS_FFT_MALLOC(nbytes)<sp/>_mm_malloc(nbytes,16)</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KISS_FFT_FREE<sp/>_mm_free</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KISS_FFT_MALLOC<sp/>malloc</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>KISS_FFT_FREE<sp/>free</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FIXED_POINT</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(FIXED_POINT<sp/>==<sp/>32)</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>kiss_fft_scalar<sp/>int32_t</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>else<sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>kiss_fft_scalar<sp/>int16_t</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>kiss_fft_scalar</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/><sp/>default<sp/>is<sp/>float<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>kiss_fft_scalar<sp/>float</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structkiss__fft__cpx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>kiss_fft_scalar<sp/>r;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>kiss_fft_scalar<sp/>i;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_state</ref>*<sp/><ref refid="structkiss__fft__state" kindref="compound">kiss_fft_cfg</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>kiss_fft_alloc</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>Initialize<sp/>a<sp/>FFT<sp/>(or<sp/>IFFT)<sp/>algorithm&apos;s<sp/>cfg/state<sp/>buffer.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>typical<sp/>usage:<sp/><sp/><sp/><sp/><sp/><sp/>kiss_fft_cfg<sp/>mycfg=kiss_fft_alloc(1024,0,NULL,NULL);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>return<sp/>value<sp/>from<sp/>fft_alloc<sp/>is<sp/>a<sp/>cfg<sp/>buffer<sp/>used<sp/>internally</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/>by<sp/>the<sp/>fft<sp/>routine<sp/>or<sp/>NULL.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>lenmem<sp/>is<sp/>NULL,<sp/>then<sp/>kiss_fft_alloc<sp/>will<sp/>allocate<sp/>a<sp/>cfg<sp/>buffer<sp/>using<sp/>malloc.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>returned<sp/>value<sp/>should<sp/>be<sp/>free()d<sp/>when<sp/>done<sp/>to<sp/>avoid<sp/>memory<sp/>leaks.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>state<sp/>can<sp/>be<sp/>placed<sp/>in<sp/>a<sp/>user<sp/>supplied<sp/>buffer<sp/>&apos;mem&apos;:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>lenmem<sp/>is<sp/>not<sp/>NULL<sp/>and<sp/>mem<sp/>is<sp/>not<sp/>NULL<sp/>and<sp/>*lenmem<sp/>is<sp/>large<sp/>enough,</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>function<sp/>places<sp/>the<sp/>cfg<sp/>in<sp/>mem<sp/>and<sp/>the<sp/>size<sp/>used<sp/>in<sp/>*lenmem</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returns<sp/>mem.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>lenmem<sp/>is<sp/>not<sp/>NULL<sp/>and<sp/>(<sp/>mem<sp/>is<sp/>NULL<sp/>or<sp/>*lenmem<sp/>is<sp/>not<sp/>large<sp/>enough),</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>function<sp/>returns<sp/>NULL<sp/>and<sp/>places<sp/>the<sp/>minimum<sp/>cfg<sp/></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>size<sp/>in<sp/>*lenmem.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">kiss_fft_cfg<sp/>kiss_fft_alloc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfft,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inverse_fft,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>mem,</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<sp/>lenmem);<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>kiss_fft(cfg,in_out_buf)</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>Perform<sp/>an<sp/>FFT<sp/>on<sp/>a<sp/>complex<sp/>input<sp/>buffer.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>for<sp/>a<sp/>forward<sp/>FFT,</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>fin<sp/>should<sp/>be<sp/><sp/>f[0]<sp/>,<sp/>f[1]<sp/>,<sp/>...<sp/>,f[nfft-1]</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>fout<sp/>will<sp/>be<sp/><sp/><sp/>F[0]<sp/>,<sp/>F[1]<sp/>,<sp/>...<sp/>,F[nfft-1]</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>each<sp/>element<sp/>is<sp/>complex<sp/>and<sp/>can<sp/>be<sp/>accessed<sp/>like</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>f[k].r<sp/>and<sp/>f[k].i</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kiss_fft(kiss_fft_cfg<sp/>cfg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fin,<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fout);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>A<sp/>more<sp/>generic<sp/>version<sp/>of<sp/>the<sp/>above<sp/>function.<sp/>It<sp/>reads<sp/>its<sp/>input<sp/>from<sp/>every<sp/>Nth<sp/>sample.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kiss_fft_stride(kiss_fft_cfg<sp/>cfg,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fin,<ref refid="structkiss__fft__cpx" kindref="compound">kiss_fft_cpx</ref><sp/>*fout,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fin_stride);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>kiss_fft_alloc<sp/>allocated<sp/>a<sp/>buffer,<sp/>it<sp/>is<sp/>one<sp/>contiguous<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/>buffer<sp/>and<sp/>can<sp/>be<sp/>simply<sp/>free()d<sp/>when<sp/>no<sp/>longer<sp/>needed*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kiss_fft_free<sp/>free</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>Cleans<sp/>up<sp/>some<sp/>memory<sp/>that<sp/>gets<sp/>managed<sp/>internally.<sp/>Not<sp/>necessary<sp/>to<sp/>call,<sp/>but<sp/>it<sp/>might<sp/>clean<sp/>up<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>your<sp/>compiler<sp/>output<sp/>to<sp/>call<sp/>this<sp/>before<sp/>you<sp/>exit.</highlight></codeline>
<codeline lineno="121"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>kiss_fft_cleanup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>Returns<sp/>the<sp/>smallest<sp/>integer<sp/>k,<sp/>such<sp/>that<sp/>k&gt;=n<sp/>and<sp/>k<sp/>has<sp/>only<sp/>&quot;fast&quot;<sp/>factors<sp/>(2,3,5)</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kiss_fft_next_fast_size(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>for<sp/>real<sp/>ffts,<sp/>we<sp/>need<sp/>an<sp/>even<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>kiss_fftr_next_fast_size_real(n)<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(kiss_fft_next_fast_size(<sp/>((n)+1)&gt;&gt;1)&lt;&lt;1)</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/media/Storage/Research/open_source/keycpp/include/kiss_fft.h"/>
  </compounddef>
</doxygen>
