<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.3.1">
  <compounddef id="structkeycpp_1_1observe" kind="struct" prot="public">
    <compoundname>keycpp::observe</compoundname>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class U</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structkeycpp_1_1observe_1ab743b1b0a5ae0e8e63e780b798e9947b" prot="public" static="no" mutable="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
        <definition>vector_k&lt;T&gt;&amp; keycpp::observe&lt; T, U &gt;::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="274" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structkeycpp_1_1observe_1a855c64ce69030f46682add6c53390cb8" prot="public" static="no" mutable="no">
        <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; U &gt; &amp;</type>
        <definition>vector_k&lt;U&gt;&amp; keycpp::observe&lt; T, U &gt;::x_ode</definition>
        <argsstring></argsstring>
        <name>x_ode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="275" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structkeycpp_1_1observe_1a25cd784e02dd29ddc7c9e7aa32c04164" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>keycpp::observe&lt; T, U &gt;::observe</definition>
        <argsstring>(vector_k&lt; T &gt; &amp;p_y, vector_k&lt; U &gt; &amp;p_x_ode)</argsstring>
        <name>observe</name>
        <param>
          <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; T &gt; &amp;</type>
          <declname>p_y</declname>
        </param>
        <param>
          <type><ref refid="classkeycpp_1_1vector__k" kindref="compound">vector_k</ref>&lt; U &gt; &amp;</type>
          <declname>p_x_ode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="277" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="structkeycpp_1_1observe_1a0063ab6fcada5756c6dca31ac7c17af9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void keycpp::observe&lt; T, U &gt;::operator()</definition>
        <argsstring>(const T &amp;y_temp, U x_temp)</argsstring>
        <name>operator()</name>
        <param>
          <type>const T &amp;</type>
          <declname>y_temp</declname>
        </param>
        <param>
          <type>U</type>
          <declname>x_temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="280" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="279" bodyend="283"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="38">
        <label>keycpp::vector_k&lt; U &gt;</label>
        <link refid="classkeycpp_1_1vector__k"/>
      </node>
      <node id="37">
        <label>keycpp::observe&lt; T, U &gt;</label>
        <link refid="structkeycpp_1_1observe"/>
        <childnode refid="38" relation="usage">
          <edgelabel>x_ode</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/media/Storage/Research/open_source/keycpp/include/keycpp.h" line="273" bodyfile="/media/Storage/Research/open_source/keycpp/include/keycpp.h" bodystart="272" bodyend="284"/>
    <listofallmembers>
      <member refid="structkeycpp_1_1observe_1a25cd784e02dd29ddc7c9e7aa32c04164" prot="public" virt="non-virtual"><scope>keycpp::observe</scope><name>observe</name></member>
      <member refid="structkeycpp_1_1observe_1a0063ab6fcada5756c6dca31ac7c17af9" prot="public" virt="non-virtual"><scope>keycpp::observe</scope><name>operator()</name></member>
      <member refid="structkeycpp_1_1observe_1a855c64ce69030f46682add6c53390cb8" prot="public" virt="non-virtual"><scope>keycpp::observe</scope><name>x_ode</name></member>
      <member refid="structkeycpp_1_1observe_1ab743b1b0a5ae0e8e63e780b798e9947b" prot="public" virt="non-virtual"><scope>keycpp::observe</scope><name>y</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
