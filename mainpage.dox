/**
\mainpage KeyCpp

# Ubuntu Users
If using Ubuntu 13.04 or greater, you can install the KeyCpp library and all dependencies using the following commands:

`sudo apt-add-repository ppa:jam4375/keycpp`

`sudo apt-get update`

`sudo apt-get install keycpp`

# <a name="usage"></a>Usage
_This library uses features only available in the <a href="https://en.wikipedia.org/wiki/C%2B%2B11">C++11 standard</a>. YOU MUST <a href="http://gcc.gnu.org/projects/cxx0x.html">COMPILE</a> WITH THIS STANDARD._

Download the example code: <a onclick="_gaq.push(['_trackEvent','Example','cpp',this.href]);" href="examples/example.cpp" target="_blank">example.cpp</a>. In the directory that you saved the file, execute the following commands to compile and run the example:

`g++ example.cpp -lkeycpp -lblas -llapack -std=c++11`

`./example`

If everything is setup correctly, there should be no errors and the output should be the same as shown [below](#output).


# <a name="alt_install"></a>Alternate Installation Instructions
## Download Source
Download the complete source and documentation: <a onclick="_gaq.push(['_trackEvent','Download','tar.gz',this.href]);" href="releases/keycpp-0.1.tar.gz" target="_blank">keycpp-0.1.tar.gz</a>.

If you want the most up-to-date version you can download the source by cloning the git repository from <a href="http://code.google.com/p/keycpp/source/checkout">code.google.com/p/keycpp/</a>. It should be noted that the version on code.google.com may not be as stable as the compressed source file above.

After downloading the source, make sure you have the dependencies and follow the installation instructions below.

## Dependencies
Currently this project makes use of the <a href="http://www.sourceforge.net/projects/kissfft/">Kiss FFT</a> and <a href="http://code.google.com/p/gnuplot-cpp/">gnuplot-cpp</a> open source projects as well as the <a href="http://www.netlib.org/lapack/">LAPACK</a> libraries, <a href="http://www.gnuplot.info/">Gnuplot</a> plotting program, and the <a href="http://www.boost.org/doc/libs/1_54_0/libs/numeric/odeint/doc/html/index.html">Boost odeint</a> library. The sources from <a href="http://www.sourceforge.net/projects/kissfft/">Kiss FFT</a> and <a href="http://code.google.com/p/gnuplot-cpp/">gnuplot-cpp</a> have been incorporated into this project.

The _only_ extra dependencies that you need on your system are the <a href="http://www.netlib.org/lapack/">LAPACK</a> libraries, <a href="http://www.gnuplot.info/">Gnuplot</a>, and the <a href="http://www.boost.org/doc/libs/1_54_0/libs/numeric/odeint/doc/html/index.html">Boost odeint</a> library.

### Ubuntu (and various <a href="https://wiki.ubuntu.com/UbuntuFlavors">flavors</a>)
_NOTE: For permformance reasons, use of OpenBLAS/LAPACK is preferred over the default versions._

To acquire all the required dependencies you can execute the following commands:

`sudo apt-get install build-essential`

`sudo apt-get install libboost-dev`

`sudo apt-get install libopenblas-dev`

`sudo apt-get install liblapack-dev`

If using Ubuntu 13.04 or prior, you must download the source for <a href="http://www.odeint.com">odeint</a> and copy the directory `./boost/numeric/odeint` and file `./boost/numeric/odeint.hpp` to `/usr/include/boost/numeric/`.

## Installation
To install KeyCpp onto your system first download the source <a onclick="_gaq.push(['_trackEvent','Download','tar.gz',this.href]);" href="releases/keycpp-0.1.tar.gz" target="_blank">here</a> and extract to the directory of your choice:

`tar -zxvf keycpp-0.1.tar.gz`

`cd ./keycpp`

The following command will compile the KeyCpp library and provide links to the library and header files in Ubuntu's default location:

`sudo ./INSTALL`

To uninstall the KeyCpp library, use the following command:

`sudo ./UNINSTALL`

### Other Operating Systems
This library has not been tested on operating systems other than Ubuntu yet. You should be able to get this library working on other linux distributions or OS X with slight modifications to the procedures above. Windows users may have a harder time getting this library to compile. For all operating systems, first make sure that you have all of the dependencies.

# Intel MKL
For Intel processors, the <a href="http://software.intel.com/en-us/intel-mkl">Intel MKL</a> libraries provide the best performance. 
If you choose to use Intel's MKL libraries, the necessary compiler flags are:

<code>g++ example.cpp -lkeycpp -L/\$(MKLROOT)/lib/intel64 -lmkl_rt -std=c++11</code>

or using the Intel C++ compiler:

<code>icc example.cpp -lkeycpp -L/\$(MKLROOT)/lib/intel64 -lmkl_rt -std=c++11</code>

If writing parallel applications, especially using OpenMP, it is highly recommended to use the Inter C++ compiler. Using `g++`, OpenMP, and Intel MKL together sometimes produces undefined behavior.

# <a name="example"></a>Example Code
<b>\c example.cpp</b>
\includelineno example.cpp
\n
<a name="output"></a>
<b>\c Text Output</b>
\includelineno output.txt
\n
<b>\c Plot Output</b>
![First plot from the example program.](../../examples/plot1.png)
\n
![Second plot from the example program.](../../examples/plot2.png)
\n

# MATLAB/Octave to KeyCpp Conversion Chart

Although the goal of this library is to offer a C++ interface similar in syntax to MATLAB/Octave, there are some minor differences. The goal of this document is to provide a conversion chart for some of the most commonly used features.

Note: You can omit the `keycpp::` prefix from the following commands by placing `using namespace keycpp;` in the same scope. This shortcut should be used with care as collisions with other libraries are possible.

| _MATLAB/Octave_ | _KeyCpp_ | Notes |
| -------- | -------- | ----- |
| `A(1,1)` | `A(0,0);` | Indexing starts at 0 in KeyCpp |
| `A(N,N)` | `A(N-1,N-1);` |  |
| `size(A,1)` | `keycpp::size(A,1);` |  |
| `size(A,2)` | `keycpp::size(A,2);` |  |
| `A(:,k)` | `A.getCol(k-1);` | C++ restricts the use of `:` |
| `A(k,:)` | `A.getRow(k-1);` |  |
| `A.'` | `keycpp::transpose(A);` | C++ does not allow overloading `.'` |
| `A'` | `keycpp::ctranspose(A);` | C++ does not allow overloading `'` |
| `A = zeros(m,n)` | `keycpp::matrix<double> A = keycpp::zeros<double>(m,n);` | or more simply: `keycpp::matrix<double> A(m,n);` |
| `A = ones(m,n)` | `keycpp::matrix<double> A = keycpp::ones<double>(m,n);` |  |
| `A.*B` | `keycpp::times(A,B);` | C++ does not allow overloading `.*` or `./` |
| `A./B` | `keycpp::rdivide(A,B);` |  |
| `A\b` | `keycpp::linsolve(A,b);` | `b` is a vector |
| `[V, D] = eig(A,B)` | `std::vector<std::complex<double>> d = keycpp::eig(A,B,&V);` | Non-Hermitian generalized eigenvalue/eigenvector solver uses LAPACK. |
| `x = linspace(0,10,N_x)` | `std::vector<double> x = keycpp::linspace(0.0,10.0,N_x);` |  |
| `x = logspace(1,3,N_x)` | `std::vector<double> x = keycpp::logspace(1.0,3.0,N_x);` | `10 <= x <= 1000` |
| `A = diag([a1, a2, a3])` | `keycpp::matrix<double> A = keycpp::diag({a1, a2, a3});` | `a1`, `a2`, and `a3` are scalar elements of `A` |
| `A = [[a1, a2]; [a3, a4]]` | `keycpp::matrix<double> A = {{a1, a2}, {a3, a4}};` |  |
*/
